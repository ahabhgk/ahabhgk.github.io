{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/note/7-languages-in-7-weeks/clojure","result":{"data":{"page":{"__typename":"MdxPage","title":"Clojure","slug":"/note/7-languages-in-7-weeks/clojure","excerpt":"Lisp on JVM 动态类型 并发：事务内存、代理 前缀表达式 字符串和字符 布尔 列表 向量，与列表不同在于随机访问优化 集合 映射 函数 绑定 匿名函数 尾递归需要 loop recur 延迟计算 defrecord defprotocol…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Clojure\",\n  \"slug\": \"/note/7-languages-in-7-weeks/clojure\",\n  \"date\": \"2020-04-01T00:00:00.000Z\",\n  \"description\": \"《7 周 7 语言》读书笔记\",\n  \"tags\": [\"Note\", \"7 Languages in 7 Weeks\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Lisp on JVM\"), mdx(\"p\", null, \"\\u52A8\\u6001\\u7C7B\\u578B\"), mdx(\"p\", null, \"\\u5E76\\u53D1\\uFF1A\\u4E8B\\u52A1\\u5185\\u5B58\\u3001\\u4EE3\\u7406\"), mdx(\"p\", null, \"\\u524D\\u7F00\\u8868\\u8FBE\\u5F0F\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-clojure\"\n  }), \"(mod 5 / 4) ;; 1\\n(+ 1 1 1 1) ;; 4\\n(/ 8 2 2) ;; 2\\n(< 1 2 4) ;; true\\n(< 1 4 3) ;; false\\n\")), mdx(\"p\", null, \"\\u5B57\\u7B26\\u4E32\\u548C\\u5B57\\u7B26\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-clojure\"\n  }), \"(str \\\"one: \\\" 1 \\\", two: \\\" 2) ;; \\\"one: 1, two: 2\\\"\\n\")), mdx(\"p\", null, \"\\u5E03\\u5C14\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-clojure\"\n  }), \"(if 0 (println \\\"true\\\")) ;; \\\"true\\\"\\n(if \\\"\\\" (println \\\"true\\\")) ;; \\\"true\\\"\\n(if nil (println \\\"true\\\") (println \\\"false\\\")) ;; \\\"false\\\"\\n\")), mdx(\"p\", null, \"\\u5217\\u8868\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-clojure\"\n  }), \"(list 1 2 3)\\n'(1 2 3) ;; \\u5F15\\u7528\\n(first '(1 2 3)) ;; 1\\n(last '(1 2 3)) ;; 3\\n(rest '(1 2 3)) ;; (2 3)\\n(cons :droid '(:r2d2 :c3po)) ;; (:droid :r2d2 :c3po)\\n\")), mdx(\"p\", null, \"\\u5411\\u91CF\\uFF0C\\u4E0E\\u5217\\u8868\\u4E0D\\u540C\\u5728\\u4E8E\\u968F\\u673A\\u8BBF\\u95EE\\u4F18\\u5316\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-clojure\"\n  }), \"(first [:hutt :wookie :ewok]) ;; :hutt\\n(nth [:hutt :wookie :ewok] 2) ;; :ewok\\n([:hutt :wookie :ewok] 2) ;; :ewok\\n(last [:hutt :wookie :ewok]) ;; :ewok\\n(rest [:hutt :wookie :ewok]) ;; (:wookie :ewok)\\n(concat [:hutt] [:wookie]) ;; (:hutt :wookie)\\n\")), mdx(\"p\", null, \"\\u96C6\\u5408\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-clojure\"\n  }), \"(def nums #{1 2 3}) ;; #{1 3 2}\\n(sort nums) ;; (1 2 3)\\n(clojure.set/union nums #{4}) ;; #{1 4 2 3}\\n(clojure.set/difference nums #{3 4}) ;; #{1 2}\\n(nums 2) ;; 2\\n(nums 4) ;; nil\\n\")), mdx(\"p\", null, \"\\u6620\\u5C04\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-clojure\"\n  }), \"(def person {:name \\\"ahabhgk\\\", :age 19})\\n(person :name) ;; \\\"ahabhgk\\\"\\n(merge person {:say \\\"Hi\\\"}) ;; {:name \\\"ahabhgk\\\", :age 19, :say \\\"Hi\\\"}\\n(assoc person :say \\\"Hi\\\") ;; {:name \\\"ahabhgk\\\", :age 19, :say \\\"Hi\\\"}\\nperson ;; {:name \\\"ahabhgk\\\", :age 19}\\n\")), mdx(\"p\", null, \"\\u51FD\\u6570\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-clojure\"\n  }), \"(defn do-it [what] (str \\\"use the \\\" what))\\n(do-it \\\"force\\\") ;; \\\"use the force\\\"\\n\\n;; doc\\n(defn do-it\\n  \\\"do something\\\"\\n  [what]\\n  (str \\\"use the \\\" what))\\n\\n(doc do-it)\\n;; ([what])\\n;;   do something\\n;; nil\\n\")), mdx(\"p\", null, \"\\u7ED1\\u5B9A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-clojure\"\n  }), \"(defn get-age [{age :age}] age)\\n(get-age person) ;; 19\\n\\n;; let \\u7B80\\u5316\\n(let [{age :age} person] (str \\\"the person is \\\" age \\\" years old\\\")) ;; \\\"the person is 19 years old\\\"\\n(let [[_ _ three] [1 2 3]] three) ;; 3\\n\")), mdx(\"p\", null, \"\\u533F\\u540D\\u51FD\\u6570\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-clojure\"\n  }), \"(map (fn [w] (count w)) [\\\"hgk\\\" \\\"lj\\\"]) ;; 3 2\\n(map #(count %) [\\\"hgk\\\" \\\"lj\\\"])) ;; 3 2\\n\\n(apply + [1 2 3]) ;; 6\\n(apply max [1 2 3]) ;; 3\\n\\n(filter odd? [1 2 3]) ;; (1 3)\\n(filter #(< % 3) [1 2 3]) ;; (1 2)\\n\")), mdx(\"p\", null, \"\\u5C3E\\u9012\\u5F52\\u9700\\u8981 loop recur\"), mdx(\"p\", null, \"\\u5EF6\\u8FDF\\u8BA1\\u7B97\"), mdx(\"p\", null, \"defrecord defprotocol\"), mdx(\"p\", null, \"\\u5B8F\\uFF1A\\u5C06\\u4EE3\\u7801\\u5F53\\u4F5C\\u5217\\u8868\\u6765\\u5904\\u7406\\uFF0C\\u5982\\u679C\\u4E0D\\u60F3\\u7ACB\\u5373\\u6267\\u884C\\uFF0C\\u5C31\\u628A\\u5B83\\u5F15\\u8D77\\u6765\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-clojure\"\n  }), \"(defn unless [test body] (if (not test) body))\\n(unless true (println \\\"nonono\\\")) ;; nonono \\u53C2\\u6570\\u7ACB\\u5373\\u6267\\u884C\\n\\n(macroexpand '#(count %))\\n;; (fn* [p1__2085#] (count p1__2085#)) \\u5B8F\\u5C55\\u5F00\\uFF0C\\u67E5\\u770B\\u5B9A\\u4E49\\u7684\\u5B8F\\uFF0C\\u524D\\u9762\\u8981\\u52A0 ' \\uFF0C\\u6CE8\\u91CA ;\\u3001\\u5F15\\u7528 '\\u3001\\u533F\\u540D\\u51FD\\u6570 # \\u90FD\\u662F\\u5B8F\\n\\n(defmacro unless [test body]\\n  (list 'if (list 'not test) body))\\n(unless true (println \\\"nonono\\\")) ;; nil\\n\")), mdx(\"p\", null, \"\\u5F15\\u7528\\u548C\\u4E8B\\u52A1\\u5185\\u5B58\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-clojure\"\n  }), \"(def movie (ref \\\"star wars\\\"))\\nmovie ;; #object[clojure.lang.Ref 0x3441e2c1 {:status :ready, :val \\\"star wars\\\"}]\\n(deref movie) ;; \\\"star wars\\\"\\n@movie ;; \\\"star wars\\\"\\n\\n(alter movie str \\\": hah\\\") ;; \\u53EA\\u80FD\\u5728\\u4E8B\\u52A1\\u4E2D\\u4FEE\\u6539\\u72B6\\u6001\\n;; Execution error (IllegalStateException) at user/eval2102 (REPL:1).\\n;; No transaction running\\n(dosync (alter movie str \\\": hah\\\")) ;; \\u901A\\u8FC7 dosync \\u5728\\u4E8B\\u52A1\\u4E2D\\u4FEE\\u6539\\n;; \\\"star wars: hah\\\"\\n@movie ;; \\\"star wars: hah\\\"\\n;; Clojure \\u5927\\u90E8\\u5206\\u4F7F\\u7528 FP\\uFF0C\\u5BF9\\u4E8E\\u53EF\\u53D8\\u7684\\u90A3\\u4E9B\\u4F7F\\u7528 STM\\uFF08\\u8F6F\\u4EF6\\u4E8B\\u52A1\\u5185\\u5B58\\uFF09\\n\")), mdx(\"p\", null, \"\\u539F\\u5B50\"), mdx(\"p\", null, \"\\u4EE3\\u7406\"), mdx(\"p\", null, \"future\"), mdx(\"h2\", {\n    \"id\": \"feeling\"\n  }, \"feeling\"), mdx(\"p\", null, \"Lisp \\u590D\\u6742\\u5316\\u4E86\\uFF0C\\u6709 Lisp \\u4F18\\u70B9\\u4E5F\\u6709 Lisp \\u7F3A\\u70B9\"), mdx(\"p\", null, \"\\u5C3E\\u9012\\u5F52\\u5F88\\u96BE\\u53D7\"), mdx(\"p\", null, \"\\u5E76\\u53D1\\uFF1A\\u4E8B\\u52A1\\u5185\\u5B58\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/note/7-languages-in-7-weeks/clojure"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}