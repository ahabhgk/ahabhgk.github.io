{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/note/7-languages-in-7-weeks/prolog","result":{"data":{"page":{"__typename":"MdxPage","title":"Prolog","slug":"/note/7-languages-in-7-weeks/prolog","excerpt":"逻辑编程语言，不是通过算法来解决逻辑问题 基本构造单元：事实、规则、查询 常量小写开头，变量大写开头 例：地图着色 递归 列表长度可变  [1, 2, 3] ，元组长度不可变  (1, 2, 3) 例：八皇后、数独 feeling 逻辑 编程","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Prolog\",\n  \"slug\": \"/note/7-languages-in-7-weeks/prolog\",\n  \"date\": \"2020-02-29T00:00:00.000Z\",\n  \"description\": \"《7 周 7 语言》读书笔记\",\n  \"tags\": [\"Note\", \"7 Languages in 7 Weeks\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u903B\\u8F91\\u7F16\\u7A0B\\u8BED\\u8A00\\uFF0C\\u4E0D\\u662F\\u901A\\u8FC7\\u7B97\\u6CD5\\u6765\\u89E3\\u51B3\\u903B\\u8F91\\u95EE\\u9898\"), mdx(\"p\", null, \"\\u57FA\\u672C\\u6784\\u9020\\u5355\\u5143\\uFF1A\\u4E8B\\u5B9E\\u3001\\u89C4\\u5219\\u3001\\u67E5\\u8BE2\"), mdx(\"p\", null, \"\\u5E38\\u91CF\\u5C0F\\u5199\\u5F00\\u5934\\uFF0C\\u53D8\\u91CF\\u5927\\u5199\\u5F00\\u5934\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-prolog\"\n  }), \"/* \\u4E8B\\u5B9E */\\nlikes(tom, jack).\\nlikes(teacherma, pony).\\nlikes(jerry, pony).\\nlikes(jerry, teacherma).\\n\\n/* \\u89C4\\u5219 */\\n/* \\\\+ \\u53D6\\u53CD \\\\+(X = Y) \\u8868\\u793A X \\u4E0D\\u7B49\\u4E8E Y\\uFF0C, \\u9017\\u53F7\\u5206\\u5272\\u5B50\\u76EE\\u6807\\uFF0C\\u90FD\\u662F\\u771F\\u624D\\u771F */\\nfriend(X, Y) :- \\\\+(X = Y), likes(X, Z), likes(Y, Z).\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"-? friend(teacherma, jerry)\\ntrue.\\n\\n-? likes(jerry, Who).\\nWho = pony ;\\nWho = teacherma.\\n\")), mdx(\"p\", null, \"\\u4F8B\\uFF1A\\u5730\\u56FE\\u7740\\u8272\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-prolog\"\n  }), \"color(red).\\ncolor(green).\\ncolor(blue).\\n\\ncolorify(A,B,C,D,E) :-\\n    color(A), color(B), color(C), color(D), color(E),\\n    \\\\+ A=B, \\\\+ A=C, \\\\+ A=D, \\\\+ A=E,\\n    \\\\+ B=C, \\\\+ C=D, \\\\+ D=E.\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"?- colorify(A,B,C,D,E).\\nA = red,\\nB = D, D = green,\\nC = E, E = blue;\\nA = red,\\nB = D, D = blue,\\nC = E, E = green ;\\nA = green,\\nB = D, D = red,\\nC = E, E = blue ;\\nA = green,\\nB = D, D = blue,\\nC = E, E = red ;\\nA = blue,\\nB = D, D = red,\\nC = E, E = green ;\\nA = blue,\\nB = D, D = green,\\nC = E, E = red ;\\n\")), mdx(\"p\", null, \"\\u9012\\u5F52\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-prolog\"\n  }), \"father(a, b).\\nfather(b, c).\\nfather(c, d).\\nfather(d, e).\\n\\nancestor(X, Y) :- father(X, Y).\\nancestor(X, Y) :- father(X, Z), ancestor(Z, Y).\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"?- ancestor(a, Who).\\nWho = b ;\\nWho = c ;\\nWho = d ;\\nWho = e ;\\nfalse.\\n\")), mdx(\"p\", null, \"\\u5217\\u8868\\u957F\\u5EA6\\u53EF\\u53D8 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[1, 2, 3]\"), \"\\uFF0C\\u5143\\u7EC4\\u957F\\u5EA6\\u4E0D\\u53EF\\u53D8 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(1, 2, 3)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"?- (1, 2, 3) = (1, 2, 3)\\ntrue\\n?- [1, 2, 3] = [1, 2, 3]\\ntrue\\n?- (A, 2, C) = (1, B, 3)\\nA = 1\\nB = 2\\nC = 3\\n?- [A, 2, C] = [1, B, 3]\\nA = 1\\nB = 2\\nC = 3\\n?- [a, b, c, d, e] = [_, _| [Head | Tail]]\\nHead = c\\nTail = [d, e]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-prolog\"\n  }), \"count(0, []).\\ncount(Count, [_| Tail]) :- count(TailCount, Tail), Count is TailCount + 1.\\n\\nsum(0, []).\\nsum(Total, [Head| Tail]) :- sum(Sum, Tail), Total is Head + Sum.\\n\\naverage(Average, List) :- sum(Sum, List), count(Count, List), Average is Sum / Count.\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-prolog\"\n  }), \"append([], List, List).\\nappend([Head| List1], List2, [Head| Tail]) :- append(List1, List2, Tail).\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"?- append(L1, L2, [1, 2, 3, 1, 5]).\\nL1 = [],\\nL2 = [1, 2, 3, 1, 5] ;\\nL1 = [1],\\nL2 = [2, 3, 1, 5] ;\\nL1 = [1, 2],\\nL2 = [3, 1, 5] ;\\nL1 = [1, 2, 3],\\nL2 = [1, 5] ;\\nL1 = [1, 2, 3, 1],\\nL2 = [5] ;\\nL1 = [1, 2, 3, 1, 5],\\nL2 = [] ;\\nfalse\\n\")), mdx(\"p\", null, \"\\u4F8B\\uFF1A\\u516B\\u7687\\u540E\\u3001\\u6570\\u72EC\"), mdx(\"h2\", {\n    \"id\": \"feeling\"\n  }, \"feeling\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\u903B\\u8F91\"), \"\\u7F16\\u7A0B\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/note/7-languages-in-7-weeks/prolog"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}