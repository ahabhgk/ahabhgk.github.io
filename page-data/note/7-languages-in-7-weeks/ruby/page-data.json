{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/note/7-languages-in-7-weeks/ruby","result":{"data":{"page":{"__typename":"MdxPage","title":"Ruby","slug":"/note/7-languages-in-7-weeks/ruby","excerpt":"解释执行 无需声明变量 每条代码都有返回值 纯面向对象，“真一切皆为对象” 简洁的判断语句： order.calculate_tax unless order.nil? 鸭子类型 符号 代码块（匿名函数） yield 代码块 &block 闭包 类 Mixin 多继承：Java…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Ruby\",\n  \"slug\": \"/note/7-languages-in-7-weeks/ruby\",\n  \"date\": \"2020-02-27T00:00:00.000Z\",\n  \"description\": \"《7 周 7 语言》读书笔记\",\n  \"tags\": [\"Note\", \"7 Languages in 7 Weeks\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u89E3\\u91CA\\u6267\\u884C\"), mdx(\"p\", null, \"\\u65E0\\u9700\\u58F0\\u660E\\u53D8\\u91CF\"), mdx(\"p\", null, \"\\u6BCF\\u6761\\u4EE3\\u7801\\u90FD\\u6709\\u8FD4\\u56DE\\u503C\"), mdx(\"p\", null, \"\\u7EAF\\u9762\\u5411\\u5BF9\\u8C61\\uFF0C\\u201C\\u771F\\u4E00\\u5207\\u7686\\u4E3A\\u5BF9\\u8C61\\u201D\"), mdx(\"p\", null, \"\\u7B80\\u6D01\\u7684\\u5224\\u65AD\\u8BED\\u53E5\\uFF1A\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"order.calculate_tax unless order.nil?\")), mdx(\"p\", null, \"\\u9E2D\\u5B50\\u7C7B\\u578B\"), mdx(\"p\", null, \"\\u7B26\\u53F7\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"# :string \\u8868\\u793A symbol\\uFF0C:string.object_id == :string.object_id\\ndef tell_the_truth(options={})\\n  if options[:profession] == :lawyer\\n    'it could be believed that this is almost certainly not false.'\\n  else\\n    true\\n  end\\nend\\n\\ntell_the_truth\\n# => true\\ntell_the_truth :profession => :lawyer\\n# => \\\"it could be believed that this is almost certainly not false.\\\"\\na = {:profession => :lawyer, :string => 'hahha'} # \\u6563\\u5217\\u8868\\ntell_the_truth a\\n# => \\\"it could be believed that this is almost certainly not false.\\\"\\n\")), mdx(\"p\", null, \"\\u4EE3\\u7801\\u5757\\uFF08\\u533F\\u540D\\u51FD\\u6570\\uFF09\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"animals = ['lions', 'tigers', 'bears', 'duck']\\nanimals.each {|a| puts a}\\n# lions\\n# tigers\\n# bears\\n# duck\\n#  => [\\\"lions\\\", \\\"tigers\\\", \\\"bears\\\", \\\"duck\\\"]\\n\")), mdx(\"p\", null, \"yield \\u4EE3\\u7801\\u5757\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class Fixnum\\n  def my_times\\n    i = self\\n    while i > 0\\n      i = i - 1\\n      yield\\n    end\\n  end\\nend\\n\\n3.my_times {puts 'mangy moose'}\\n# mangy moose\\n# mangy moose\\n# mangy moose\\n#  => nil\\n\")), mdx(\"p\", null, \"&block \\u95ED\\u5305\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"def call_block(&block)\\n  block.call\\nend\\n\\ndef pass_block(&block)\\n  call_block(&block)\\nend\\n\\npass_block {puts 'helloo'}\\n# helloo\\n#  => nil\\n\")), mdx(\"p\", null, \"\\u7C7B\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"4.class.superclass.superclass.superclass.superclass\\n# Integer Numeric Object BasicObject nil\\n\\n4.class.class.superclass.superclass.superclass.superclass\\n# Integer Class Module Object BasicObject nil\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"\\nclass Tree\\n  attr_accessor :children, :node_name\\n\\n  def initialize(name, children = [])\\n    @children = children\\n    @node_name = name\\n  end\\n\\n  def visit_all(&block)\\n    visit &block\\n    children.each {|c| c.visit_all &block}\\n  end\\n\\n  def visit(&block)\\n    block.call self\\n  end\\nend\\n\\nruby_tree = Tree.new(\\\"Ruby\\\", [Tree.new(\\\"Reia\\\"), Tree.new(\\\"MacRuby\\\")])\\nruby_tree.visit {|node| puts node.node_name}\\n# Ruby\\nruby_tree.visit_all {|node| puts node.node_name}\\n# Ruby\\n# Reia\\n# MacRuby\\n\")), mdx(\"p\", null, \"Mixin \\u591A\\u7EE7\\u627F\\uFF1AJava \\u901A\\u8FC7\\u63A5\\u53E3\\u5B9E\\u73B0\\uFF0CRuby \\u901A\\u8FC7 Mixin\\uFF0C\\u5148\\u5B9A\\u4E49\\u7C7B\\u7684\\u4E3B\\u8981\\u90E8\\u5206\\uFF0C\\u7136\\u540E\\u7528\\u6A21\\u5757\\u6DFB\\u52A0\\u989D\\u5916\\u529F\\u80FD\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"module ToFile\\n  def to_f\\n    puts \\\"mixin tofile\\\"\\n  end\\nend\\n\\nclass Person\\n  include ToFile\\n  attr_accessor :name\\n\\n  def initialize(name)\\n    @name = name\\n  end\\n\\n  def to_s\\n    name\\n  end\\nend\\n\\nPerson.new('matz').to_f\\n# mixin tofile\\n\")), mdx(\"p\", null, \"\\u53EF\\u679A\\u4E3E\\uFF08\\u679A\\u4E3E\\u6A21\\u5757\\uFF09\\uFF1A\\u8BA9\\u7C7B\\u53EF\\u679A\\u4E3E\\uFF0C\\u5FC5\\u987B\\u5B9E\\u73B0 each\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"a = [5, 2, 4, 3, 1]\\nb = a.sort # [1, 2, 3, 4, 5]\\na.any? {|i| i > 4} # true\\na.all? {|i| i > 4} # false\\nc = a.collect {|i| i * 2} # [10, 4, 6, 8, 2]\\nd = a.select {|i| i % 2 == 0} # [2, 4]\\na.member?(2) # true\\na.inject(10) do |acc, cur|\\n  puts \\\"acc: #{acc}, cur: #{cur}\\\"\\n  acc + cur\\nend\\n#  => 25\\n\")), mdx(\"p\", null, \"\\u53EF\\u6BD4\\u8F83\\uFF08\\u6BD4\\u8F83\\u6A21\\u5757\\uFF09\\uFF1A\\u8BA9\\u7C7B\\u53EF\\u6BD4\\u8F83\\uFF0C\\u5FC5\\u987B\\u5B9E\\u73B0 <=>\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"'same' <=> 'same' # 0\\n\")), mdx(\"h2\", {\n    \"id\": \"元编程：写能写程序的程序\"\n  }, \"\\u5143\\u7F16\\u7A0B\\uFF1A\\u5199\\u80FD\\u5199\\u7A0B\\u5E8F\\u7684\\u7A0B\\u5E8F\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"# rails\\nclass Department < ActiveRecord::Base\\n  has_many :employees\\n  has_one :manager\\nend\\n\")), mdx(\"p\", null, \"\\u5F00\\u653E\\u7C7B\\uFF1A\\u53EF\\u4EE5\\u5BF9\\u7C7B\\u91CD\\u65B0\\u5B9A\\u4E49\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class NilClass\\n  def blank?\\n    true\\n  end\\nend\\n\\nclass String\\n  def blank?\\n    self.size == 0\\n  end\\nend\\n\\n[\\\"\\\", \\\"person\\\", nil].each do |e|\\n  puts e unless e.blank?\\nend\\n# \\\"person\\\"\\n\")), mdx(\"p\", null, \"method_missing\\uFF1A\\u627E\\u4E0D\\u5230\\u9ED8\\u65B9\\u6CD5\\u65F6\\u8C03\\u7528\\uFF0C\\u53EF\\u4EE5\\u590D\\u5199 method_missing \\u65B9\\u6CD5\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class Roman\\n  def self.method_missing name, *args\\n    roman = name.to_s\\n    roman.gsub(\\\"IV\\\", \\\"IIII\\\")\\n    roman.gsub(\\\"IX\\\", \\\"VIIII\\\")\\n    roman.gsub(\\\"XL\\\", \\\"XXXX\\\")\\n    roman.gsub(\\\"XC\\\", \\\"LXXXX\\\")\\n\\n    (roman.count(\\\"I\\\") +\\n     roman.count(\\\"V\\\") * 5 +\\n     roman.count(\\\"X\\\") * 10 +\\n     roman.count(\\\"L\\\") * 50 +\\n     roman.count(\\\"C\\\") * 100)\\n  end\\nend\\n\\nputs Roman.XII # 12\\n\")), mdx(\"p\", null, \"\\u52A8\\u6001\\u7684\\u6539\\u53D8\\u7C7B\\uFF1A\\u6A21\\u5757\\u88AB\\u53E6\\u4E00\\u6A21\\u5757\\u5305\\u542B\\uFF0CRuby \\u5C31\\u4F1A\\u8C03\\u7528\\u8BE5\\u6A21\\u5757\\u7684 included \\u65B9\\u6CD5\\uFF0C\\u7C7B\\u4E5F\\u662F\\u6A21\\u5757\"), mdx(\"h2\", {\n    \"id\": \"feeling\"\n  }, \"feeling\"), mdx(\"p\", null, \"\\u81EA\\u7531\\uFF08\\u6709\\u70B9\\u50CF JS \\u4E2D\\u4FEE\\u6539\\u539F\\u578B\\uFF0C\\u4F46\\u5E73\\u65F6\\u66F4\\u591A\\u662F\\u9650\\u5236\\u7684\\uFF09\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/note/7-languages-in-7-weeks/ruby"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}