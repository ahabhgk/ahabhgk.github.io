{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/note/rust/rust-for-rustaceans","result":{"data":{"page":{"__typename":"MdxPage","title":"Rust for Rustaceans","slug":"/note/rust/rust-for-rustaceans","excerpt":"Foundations Talking About Memory Variables in Depth 在高层视角中，变量不是字节的表示，而是给值起的名字，可以看作一个有名字的点，值在初始化时被命名，作为起点，在被访问时将上一个同名的点连接，在 move、drop…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Rust for Rustaceans\",\n  \"slug\": \"/note/rust/rust-for-rustaceans\",\n  \"date\": \"2022-01-19T00:00:00.000Z\",\n  \"description\": \"rust-for-rustaceans\",\n  \"tags\": [\"Note\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"foundations\"\n  }, \"Foundations\"), mdx(\"h3\", {\n    \"id\": \"talking-about-memory\"\n  }, \"Talking About Memory\"), mdx(\"h4\", {\n    \"id\": \"variables-in-depth\"\n  }, \"Variables in Depth\"), mdx(\"p\", null, \"\\u5728\\u9AD8\\u5C42\\u89C6\\u89D2\\u4E2D\\uFF0C\\u53D8\\u91CF\\u4E0D\\u662F\\u5B57\\u8282\\u7684\\u8868\\u793A\\uFF0C\\u800C\\u662F\\u7ED9\\u503C\\u8D77\\u7684\\u540D\\u5B57\\uFF0C\\u53EF\\u4EE5\\u770B\\u4F5C\\u4E00\\u4E2A\\u6709\\u540D\\u5B57\\u7684\\u70B9\\uFF0C\\u503C\\u5728\\u521D\\u59CB\\u5316\\u65F6\\u88AB\\u547D\\u540D\\uFF0C\\u4F5C\\u4E3A\\u8D77\\u70B9\\uFF0C\\u5728\\u88AB\\u8BBF\\u95EE\\u65F6\\u5C06\\u4E0A\\u4E00\\u4E2A\\u540C\\u540D\\u7684\\u70B9\\u8FDE\\u63A5\\uFF0C\\u5728 move\\u3001drop\\n\\u65F6\\u8FD9\\u4E2A\\u70B9\\u6D88\\u5931\\uFF0C\\u5F62\\u6210\\u4E00\\u4E2A \\u201Cflow\\u201C\\uFF0C\\u8FDB\\u800C\\u5BF9 flow \\u8FDB\\u884C borrow check\\u3001drop check\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=FSU9vZrn19w\"\n  }), \"Understanding Rust Lifetimes: a visual introduction - Presentation to the Kerala Rustacaeans\")), mdx(\"p\", null, \"\\u5728\\u5E95\\u5C42\\u89C6\\u89D2\\u4E2D\\uFF0C\\u53D8\\u91CF\\u662F\\u4E00\\u4E2A \\u201Cvalue slot\\u201D\\uFF0C\\u8D4B\\u503C\\u65F6\\u4E22\\u5F03\\u65E7\\u503C\\uFF0C\\u8BBF\\u95EE\\u65F6\\u7F16\\u8BD1\\u5668\\u68C0\\u67E5\\u662F\\u5426\\u4E3A\\u7A7A\\uFF0C\\u7C7B\\u4F3C C \\u7684\\u53D8\\u91CF\\uFF0C\\u8FD9\\u4E2A\\u89C6\\u89D2\\u4E3B\\u8981\\u7528\\u4E8E\\u660E\\u786E\\u63A8\\u7406\\u5185\\u5B58\"), mdx(\"h4\", {\n    \"id\": \"memory-regions\"\n  }, \"Memory Regions\"), mdx(\"p\", null, \"Stack is a sagment of memory\\uFF0C\\u5F53\\u51FD\\u6570\\u8C03\\u7528\\u65F6\\u4F1A\\u5728 Stack \\u4E0A\\u5206\\u914D\\u4E00\\u4E2A\\u8FDE\\u7EED\\u7684\\u5185\\u5B58\\u5757\\uFF0C\\u6210\\u4E3A \\u201Cframe\\u201D\\uFF0C\\u51FD\\u6570\\u8C03\\u7528\\u7ED3\\u675F\\u65F6\\u8FD9\\u4E2A\\nframe \\u4E2D\\u7684\\u5185\\u5B58\\u5168\\u90E8\\u4F1A\\u88AB\\u56DE\\u6536\\uFF0C\\u56E0\\u6B64\\u8FD4\\u56DE\\u7684\\u5F15\\u7528\\u5FC5\\u987B outlive this frame\"), mdx(\"p\", null, \"Heap is a pool of memory\\uFF0C\\u5806\\u5185\\u5B58\\u4E2D\\u7684\\u503C\\u9700\\u8981\\u660E\\u786E\\u7684\\u5206\\u914D\\u548C\\u91CA\\u653E\\uFF0C\\u4F7F frame \\u4E2D\\u7684\\u503C outlive \\u53EF\\u4EE5\\u628A\\u8FD9\\u4E2A\\u503C\\u653E\\u5728\\u5806\\u4E0A\\uFF0C\\u7EBF\\u7A0B\\u4E4B\\u95F4\\u4E0D\\u5171\\u4EAB\\nstack\\uFF0C\\u5806\\u4E0A\\u7684\\u503C\\u53EF\\u4EE5\\u5938\\u7EBF\\u7A0B\\u3002Rust \\u4E2D\\u4E3B\\u8981\\u901A\\u8FC7 Box \\u5206\\u914D heap\"), mdx(\"p\", null, \"Static memory \\u4F1A\\u88AB\\u7F16\\u8BD1\\u8FDB\\u4E8C\\u8FDB\\u5236\\u6587\\u4EF6\\u4E2D\\uFF0C\\u6574\\u4E2A\\u7A0B\\u5E8F\\u6267\\u884C\\u8FC7\\u7A0B\\u4E2D\\u90FD\\u5B58\\u5728\\uFF0C\\u5982\\u5E38\\u91CF\\uFF08const\\uFF09\\u3001\\u5B57\\u7B26\\u4E32\\uFF08&'static str\\uFF09\\u3002'static\\n\\u751F\\u547D\\u5468\\u671F\\u8868\\u793A\\u76F4\\u5230\\u7A0B\\u5E8F\\u5173\\u95ED\\u90FD\\u6709\\u6548\\uFF0C\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://doc.rust-lang.org/std/thread/fn.spawn.html\"\n  }), \"std::thread::spawn\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pretzelhammer/rust-blog/blob/master/posts/translations/zh-hans/common-rust-lifetime-misconceptions.md#2-%E5%A6%82%E6%9E%9C-t-static-%E9%82%A3%E4%B9%88-t-%E7%9B%B4%E5%88%B0%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9D%9F%E4%B8%BA%E6%AD%A2%E9%83%BD%E4%B8%80%E5%AE%9A%E6%98%AF%E6%9C%89%E6%95%88%E7%9A%84\"\n  }), \"Rust \\u4E2D\\u5E38\\u89C1\\u7684\\u6709\\u5173\\u751F\\u547D\\u5468\\u671F\\u7684\\u8BEF\\u89E3 - 2. \\u5982\\u679C T: 'static \\u90A3\\u4E48 T \\u76F4\\u5230\\u7A0B\\u5E8F\\u7ED3\\u675F\\u4E3A\\u6B62\\u90FD\\u4E00\\u5B9A\\u662F\\u6709\\u6548\\u7684\")), mdx(\"h3\", {\n    \"id\": \"ownership\"\n  }, \"Ownership\"), mdx(\"p\", null, \"\\u6240\\u6709\\u7684\\u503C\\u90FD\\u6709\\u4E00\\u4E2A\\u6240\\u6709\\u8005\\uFF0C\\u8D1F\\u8D23\\u91CA\\u653E\"), mdx(\"h3\", {\n    \"id\": \"borrowing-and-lifetimes\"\n  }, \"Borrowing and Lifetimes\"), mdx(\"h4\", {\n    \"id\": \"shared-references\"\n  }, \"Shared References\"), mdx(\"p\", null, \"&T\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://doc.rust-lang.org/std/marker/trait.Copy.html#impl-Copy-73\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"impl<'_, T> Copy for &'_ T\"))), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://doc.rust-lang.org/std/primitive.reference.html#trait-implementations-1\"\n  }), \"Primitive Type reference - Trait implementations\")), mdx(\"h4\", {\n    \"id\": \"mutable-exclusive-reference\"\n  }, mdx(\"del\", {\n    parentName: \"h4\"\n  }, \"Mutable\"), \" Exclusive Reference\"), mdx(\"p\", null, \"&mut T\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.rs/dtolnay/latest/dtolnay/macro._02__reference_types.html\"\n  }), \"dtolnay/macro._02__reference_types\")), mdx(\"h4\", {\n    \"id\": \"interior-mutability\"\n  }, \"Interior Mutability\"), mdx(\"p\", null, \"\\u901A\\u5E38\\u4F9D\\u9760\\u989D\\u5916\\u7684\\u673A\\u5236\\uFF08\\u5982\\u539F\\u5B50 CPU \\u6307\\u4EE4\\u3001runtime check\\uFF09\\u6216\\u4E0D\\u53D8\\u6027\\u6765\\u63D0\\u4F9B\\u5B89\\u5168\\u7684\\u53EF\\u53D8\\u6027\\uFF0C\\u800C\\u4E0D\\u4F9D\\u8D56 &mut\\nT\\u3002\\u8FD9\\u4E9B\\u7C7B\\u578B\\u901A\\u5E38\\u5206\\u4E3A\\u4E24\\u7C7B\\uFF1A\\u4E00\\u7C7B\\u662F\\u8BA9\\u4F60\\u901A\\u8FC7\\u5171\\u4EAB\\u5F15\\u7528\\u83B7\\u5F97\\u4E00\\u4E2A\\u53EF\\u53D8\\u7684\\u5F15\\u7528\\uFF0C\\u53E6\\u4E00\\u7C7B\\u662F\\u8BA9\\u4F60\\u66FF\\u6362\\u4E00\\u4E2A\\u53EA\\u7ED9\\u5B9A\\u5171\\u4EAB\\u5F15\\u7528\\u7684\\u503C\"), mdx(\"h4\", {\n    \"id\": \"lifetimes\"\n  }, \"Lifetimes\"), mdx(\"p\", null, \"Lifetimes and the Borrow Checker\\uFF0C\\u5C31\\u50CF\\u4E4B\\u524D\\u901A\\u8FC7 flow \\u8FDB\\u884C borrowck\"), mdx(\"p\", null, \"Generic Lifetimes\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"struct StrSplit<'s, 'p> {\\n  delimiter: &'p str,\\n  document: &'s str,\\n}\\n\\nimpl<'s, 'p> Iterator for StrSplit<'s, 'p> {\\n  type Item = &'s str;\\n  \\n  fn next(&self) -> Option<Self::Item> {\\n    todo!()\\n  }\\n}\\n\\nfn str_before(s: &str, c: char) -> Option<&str> {\\n  StrSplit { document: s, delimiter: &c.to_string() }.next()\\n}\\n\")), mdx(\"p\", null, \"Lifetime Variance\\uFF1Acovariant\\uFF08\\u534F\\u53D8\\uFF09, invariant\\uFF08\\u4E0D\\u53D8\\uFF09, and contravariant\\uFF08\\u9006\\u53D8\\uFF09\\uFF0C&'a T \\u548C\\n&'a mut T \\u5BF9\\u4E8E 'a \\u6765\\u8BF4\\u90FD\\u662F\\u534F\\u53D8\\u7684\\uFF0C\\u5BF9 T \\u6765\\u8BF4\\u5C31\\u4E0D\\u8C08\\u4E86\\uFF0C\\u56E0\\u4E3A\\n\\u201C\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://doc.rust-lang.org/stable/reference/subtyping.html\"\n  }), \"Subtyping in Rust is very restricted and occurs only due to variance with respect to lifetimes and between types with higher ranked lifetimes.\"), \"\\u201D\"), mdx(\"h2\", {\n    \"id\": \"types\"\n  }, \"Types\"), mdx(\"h3\", {\n    \"id\": \"types-in-memory\"\n  }, \"Types in Memory\"), mdx(\"h4\", {\n    \"id\": \"alignment\"\n  }, \"Alignment\"), mdx(\"p\", null, \"\\u4E3A\\u4E86\\u51CF\\u5C11\\u786C\\u4EF6\\u8BFB\\u53D6\\u5185\\u5B58\\u7684\\u6B21\\u6570\\u9700\\u8981\\u5BF9\\u9F50\\uFF0C\\u6240\\u4EE5\\u7C7B\\u578B\\u6240\\u5360\\u5185\\u5B58\\u7684\\u5927\\u5C0F\\u90FD\\u5F97\\u662F\\u5176 align \\u7684\\u500D\\u6570\\uFF0Cu8 \\u662F\\u4E00\\u5B57\\u8282\\u5BF9\\u9F50\\uFF0Cu16\\n\\u4E24\\u5B57\\u8282\\u5BF9\\u9F50\\uFF0C\\u590D\\u6742\\u7C7B\\u578B\\u6309\\u5305\\u542B\\u7C7B\\u578B\\u7684\\u6700\\u5927\\u7684\\u5BF9\\u9F50\\u65B9\\u5F0F\\u5BF9\\u9F50\"), mdx(\"h4\", {\n    \"id\": \"layout\"\n  }, \"Layout\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"#[repr(C)]\\nstruct Foo {\\n  tiny: bool, // 1\\n  // _p1: [0; 3], // 3\\n  normal: u32, // 4\\n  small: u8, // 1\\n  // _p2: [0; 7] // 7\\n  long: u64, // 8\\n  short: u16, // 2\\n  // _p3: [0; 6] // 6\\n}\\n\\nstd::mem::align_of::<Foo>(); // 8\\nstd::mem::size_of::<Foo>(); // 32\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"repr(C)\"), \" \\u7684\\u5E03\\u5C40\\u662F\\u8FD9\\u6837\\u7684\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"repr(Rust)\"), \" \\u7684\\u5E03\\u5C40\\u4F1A\\u8FDB\\u884C\\u5404\\u79CD\\u4F18\\u5316\\uFF0C\\u4F7F\\u5176\\u987A\\u5E8F\\u6539\\u53D8\\uFF0C\\u6240\\u4EE5\\u5373\\u4F7F\\u4E24\\u4E2A\\u4E0D\\u540C\\u7684\\u7C7B\\u578B\\u5171\\u4EAB\\u6240\\u6709\\u76F8\\u540C\\u7684\\u5B57\\u6BB5\\u3001\\u76F8\\u540C\\u7684\\u7C7B\\u578B\\u3001\\u76F8\\u540C\\u7684\\u987A\\u5E8F\\uFF0C\\u4E5F\\u4E0D\\u80FD\\u4FDD\\u8BC1\\u5B83\\u4EEC\\u7684\\u5E03\\u5C40\\u662F\\u4E00\\u6837\\u7684\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"struct Foo {\\n  tiny: bool, // 1\\n  normal: u32, // 4\\n  small: u8, // 1\\n  long: u64, // 8\\n  short: u16, // 2\\n\\n  // long: u64, // 8\\n  // normal: u32, // 4\\n  // short: u16, // 2\\n  // tiny: bool, // 1\\n  // small: u8, // 1\\n}\\n\\nstd::mem::align_of::<Foo>(); // 8\\nstd::mem::size_of::<Foo>(); // 16\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=rDoqT-a6UFg&t=2080s\"\n  }), \"Visualizing memory layout of Rust's data types\")), mdx(\"h4\", {\n    \"id\": \"dynamically-sized-types-and-wide-pointers\"\n  }, \"Dynamically Sized Types and Wide Pointers\"), mdx(\"p\", null, \"Sized \\u662F\\u4E00\\u4E2A auto trait\\uFF0C\\u56E0\\u4E3A\\u592A\\u5E38\\u7528\\u4E86\\u5927\\u90E8\\u5206\\u7C7B\\u578B\\u90FD\\u5B9E\\u73B0\\u4E86\\u5B83\\uFF0C\\u9664\\u4E86 trait object \\u548C slice\\uFF0C\\u4ED6\\u4EEC\\u7684\\u5927\\u5C0F\\u5728\\u8FD0\\u884C\\u65F6\\u624D\\u80FD\\u77E5\\u9053\\uFF0C\\u7F16\\u8BD1\\u65F6\\u63A8\\u65AD\\u4E0D\\u51FA\\u6765\\uFF0C\\u8FD9\\u4E9B\\u7C7B\\u578B\\u9700\\u8981\\u653E\\u5728\\u6307\\u9488\\u540E\\u9762\\uFF08\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&[u8]\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box<dyn Iterator>\"), \"\\uFF09\"), mdx(\"h3\", {\n    \"id\": \"traits-and-trait-bounds\"\n  }, \"Traits and Trait Bounds\"), mdx(\"h4\", {\n    \"id\": \"compilation-and-dispatch\"\n  }, \"Compilation and Dispatch\"), mdx(\"p\", null, \"\\u8BB2\\u7684 static dispatch \\u548C dynamic dispatch\"), mdx(\"h4\", {\n    \"id\": \"generic-traits\"\n  }, \"Generic Traits\"), mdx(\"p\", null, \"Rust \\u4F7F trait \\u53D8\\u5F97 generic \\u7684\\u65B9\\u5F0F\\u4E3B\\u8981\\u6709\\u4E24\\u79CD\\uFF1A\\u6CDB\\u578B\\u53C2\\u6570\\uFF08\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trait Foo<T> { ... }\"), \"\\uFF09\\u3001\\u5173\\u8054\\u7C7B\\u578B\\uFF08\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trait Foo { type Item; ... }\"), \"\\uFF09\"), mdx(\"p\", null, \"\\u5982\\u679C\\u53EA\\u5E0C\\u671B\\u7C7B\\u578B\\u5BF9 trait \\u7684\\u5B9E\\u73B0\\u53EA\\u6709\\u4E00\\u4E2A\\uFF0C\\u5C31\\u7528\\u5173\\u8054\\u7C7B\\u578B\\uFF0C\\u5426\\u5219\\u7528\\u6CDB\\u578B\\u53C2\\u6570\\uFF0C\\u6BD4\\u5982 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Iterator\"), \"\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Iterator::Item\"), \" \\u53EA\\u80FD\\u6709\\u4E00\\u4E2A\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"From<T>\"), \" \\u53EF\\u4EE5\\u6709\\u591A\\u4E2A\"), mdx(\"h4\", {\n    \"id\": \"coherence-and-the-orphan-rule\"\n  }, \"Coherence and the Orphan Rule\"), mdx(\"p\", null, \"\\u4E3A\\u4E86\\u660E\\u786E\\u7C7B\\u578B\\u7684\\u65B9\\u6CD5\\u7684\\u5B9E\\u73B0\\u662F\\u54EA\\u4E2A\\uFF0C\\u9632\\u6B62\\u7C7B\\u4F3C\\u81EA\\u5DF1 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"impl Display for bool\"), \" \\u5F71\\u54CD\\u5176\\u4ED6 crate \\u4E2D bool \\u4F7F\\u7528\\u7684\\u60C5\\u51B5\\uFF0CRust \\u63D0\\u51FA\\u5B64\\u513F\\u539F\\u5219\\uFF1A\\u53EA\\u6709\\u5F53\\u4E00\\u4E2A trait \\u6216 type \\u5C5E\\u4E8E\\u4F60\\u7684 crate \\u65F6\\uFF0C\\u4F60\\u624D\\u80FD\\u4E3A\\u8BE5 type \\u5B9E\\u73B0\\u8BE5 trait\"), mdx(\"p\", null, \"\\u5B64\\u513F\\u539F\\u5219\\u4E5F\\u6709\\u4E9B\\u989D\\u5916\\u7684\\u5F71\\u54CD\\uFF1A\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u5141\\u8BB8 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"impl<T> MyTrait for T where T: ...\"), \" \\u8FD9\\u79CD\\u9002\\u7528\\u5E7F\\u6CDB\\u7C7B\\u578B\\u7684\\u5B9E\\u73B0\\uFF0C\\u4F46\\u6DFB\\u52A0\\u65F6\\u4E3A brake change\\uFF0C\\u53EF\\u80FD\\u4F1A\\u5BFC\\u81F4\\u4E0B\\u6E38 crate \\u4F7F\\u7528\\u7684\\u65B9\\u6CD5\\u51B2\\u7A81\\u800C\\u65E0\\u6CD5\\u7F16\\u8BD1\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"#[fundamental]\"), \" \\u5C5E\\u6027\\u7684\\u7C7B\\u578B\\u5305\\u62EC \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"&\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"&mut\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Box\"), \"\\uFF0C\\u53EF\\u4EE5\\u4E3A\\u5176 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"impl MyTrait for &Foo\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"impl From<MyType> for Vec<usize>\"), \" \\u8FD9\\u79CD\\u6709\\u4E00\\u90E8\\u5206\\u662F\\u5141\\u8BB8\\u7684\")), mdx(\"h4\", {\n    \"id\": \"trait-bounds\"\n  }, \"Trait Bounds\"), mdx(\"p\", null, \"\\u8FD9\\u6837\\u662F\\u53EF\\u4EE5\\u7684\\uFF0C\\u6E10\\u8FDB\\u5F0F\\u7684\\u786E\\u8BA4\\u7C7B\\u578B\\u5F88\\u6709\\u5E2E\\u52A9\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"fn foo(s: String) -> String where String: Clone  {\\n  s.clone()\\n}\\n\")), mdx(\"p\", null, \"HRTB\\uFF1AIf you write F: Fn(&T) -> &U, you need to provide a lifetime for those refer- ences, but you really want to say \\u201Cany lifetime as long as the output is the same as the input.\\u201D Using a higher-ranked lifetime, you can write F: for<'a> Fn(&'a T) -> &'a U to say that for any lifetime 'a, the bound must hold. The Rust compiler is smart enough that it automatically adds the for when you write Fn bounds with references like this, which covers the majority of use cases for this feature.\"), mdx(\"h4\", {\n    \"id\": \"marker-traits\"\n  }, \"Marker Traits\"), mdx(\"p\", null, \"\\u5305\\u62EC Copy\\u3001Send\\u3001Sync\\u3001Sized\\u3001Unpin\\uFF0C\\u540C\\u65F6\\u9664\\u4E86 Copy \\u90FD\\u662F auto trait\"), mdx(\"p\", null, \"Unit Type \\u7684\\u4E00\\u4E2A\\u4F8B\\u5B50\\uFF0C\\u72B6\\u6001\\u6A21\\u5F0F\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"use std::marker::PhantomData;\\n\\nstruct Authenticated;\\nstruct Unauthenticated;\\nstruct SshConnection<S> {\\n  _marker: PhantomData<S>,\\n}\\n\\nimpl<S> SshConnection<S> {\\n  pub fn new() -> SshConnection<Unauthenticated> {\\n    SshConnection::<Unauthenticated> { _marker: PhantomData }\\n  }\\n}\\n\\nimpl SshConnection<Unauthenticated> {\\n  pub fn connect(&mut self) -> SshConnection<Authenticated> {\\n    SshConnection::<Authenticated> { _marker: PhantomData }\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"existential-types\"\n  }, \"Existential Types\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"fn foo() -> impl Future<Output = i32> {}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"#![feature(type_alias_impl_trait)] // see https://github.com/rust-lang/rust/issues/63063\\n\\nstruct Foo {\\n  v: Vec<i32>,\\n}\\n\\nimpl IntoIterator for Foo {\\n  type Item = i32;\\n  type IntoIter = impl Iterator<Item = Self::Item>;\\n\\n  fn into_iter(self) -> Self::IntoIter {\\n    self.v.into_iter()\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"designing-interfaces\"\n  }, \"Designing Interfaces\"), mdx(\"p\", null, \"See also:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://rust-lang.github.io/api-guidelines/\"\n  }), \"API Guidelines\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://rust-lang.github.io/rfcs/1105-api-evolution.html\"\n  }), \"rfc#1105: API Evolution\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://doc.rust-lang.org/cargo/reference/semver.html\"\n  }), \"The Cargo Book - semver\"))), mdx(\"h3\", {\n    \"id\": \"unsurprising\"\n  }, \"Unsurprising\"), mdx(\"h4\", {\n    \"id\": \"naming-practices\"\n  }, \"Naming Practices\"), mdx(\"p\", null, \"into\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u3001as\"), \"\\u3001to_\\u3001iter\\u3001iter_mut\\u3001get\\u3001get_mut\\u2026\\u2026\"), mdx(\"h4\", {\n    \"id\": \"common-traits-for-types\"\n  }, \"Common Traits for Types\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Debug\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Sync\\u3001Send\\u3001Unpin\\u3001Sized auto-traits\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Clone\\u3001Default\\uFF0C\\u5982\\u679C\\u4E0D\\u80FD\\u5B9E\\u73B0\\u8981\\u6587\\u6863\\u8BF4\\u660E\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"PartialEq \\u4EE5\\u4FBF assert_eq!\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"PartialOrd\\u3001Hash \\u53EF\\u80FD\\u7528\\u4E8E\\u4F5C\\u4E3A key \\u65F6\\u5B9E\\u73B0\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Eq\\u3001Ord \\u8BED\\u4E49\\u6709\\u989D\\u5916\\u8981\\u6C42\\uFF0C\\u7B26\\u5408\\u65F6\\u5B9E\\u73B0\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"serde \\u7684 Serialize \\u548C Deserialize\\uFF0C\\u4E0D\\u60F3\\u6DFB\\u52A0\\u5FC5\\u8981\\u4F9D\\u8D56\\u53EF\\u5F00 feature \\u201Cserde\\u201D \\u63D0\\u4F9B\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u5C3D\\u91CF\\u4E0D\\u5B9E\\u73B0 Copy\\uFF0C\\u7834\\u574F move \\u8BED\\u4E49\\uFF0C\\u800C\\u4E14\\u53BB\\u6389 Copy \\u662F break change\")), mdx(\"h4\", {\n    \"id\": \"ergonomic-trait-implementations\"\n  }, \"Ergonomic Trait Implementations\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"trait Foo {\\n  fn foo(&self);\\n}\\n\\nimpl<T> Foo for &T where T: Foo {\\n  fn foo(&self) {\\n    Foo::foo(*self);\\n  }\\n}\\n\\nimpl<T> Foo for &mut T where T: Foo {\\n  fn foo(&self) {\\n    Foo::foo(*self);\\n  }\\n}\\n\\nimpl<T> Foo for Box<T> where T: Foo {\\n  fn foo(&self) {\\n    Foo::foo(&**self);\\n  }\\n}\\n\\nstruct Fo;\\n\\nimpl Foo for Fo {\\n  fn foo(&self) {\\n    println!(\\\"foo\\\");\\n  }\\n}\\n\\nfn fooo<T>(f: T) where T: Foo {\\n  f.foo();\\n}\\n\\nfn main() {\\n  let f = &Fo;\\n  fooo(f);\\n  let f = &mut Fo;\\n  fooo(f);\\n  let f = Box::new(Fo);\\n  fooo(f);\\n}\\n\")), mdx(\"h4\", {\n    \"id\": \"wrapper-types\"\n  }, \"Wrapper Types\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Deref\"), \"\\uFF1A\\u65B9\\u4FBF \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".\"), \" \\u8C03\\u7528 Target \\u4E0A\\u7684\\u65B9\\u6CD5\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AsRef\"), \"\\uFF1A\\u65B9\\u4FBF &Wrapper \\u4F5C\\u4E3A &Inner \\u4F7F\\u7528\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"From<Inner>\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"From<Wrapper>\"), \"\\uFF1A\\u65B9\\u4FBF\\u6DFB\\u52A0\\u548C\\u5220\\u9664\\u8FD9\\u5C42\\u5305\\u88C5\")), mdx(\"p\", null, \"Borrow \\u53EA\\u9002\\u7528\\u4E8E\\u4F60\\u7684\\u7C7B\\u578B\\u672C\\u8D28\\u4E0A\\u7B49\\u540C\\u4E8E\\u53E6\\u4E00\\u4E2A\\u7C7B\\u578B\\u7684\\u60C5\\u51B5\\uFF0C\\u5982 &String \\u548C &str\"), mdx(\"h3\", {\n    \"id\": \"flexible\"\n  }, \"Flexible\"), mdx(\"h4\", {\n    \"id\": \"generic-arguments\"\n  }, \"Generic Arguments\"), mdx(\"p\", null, \"static dispatch \\u5BB9\\u6613\\u4F7F\\u7C7B\\u578B\\u53D8\\u7684\\u590D\\u6742\\uFF0C\\u6709\\u65F6\\u53EF\\u4EE5\\u7528 dynamic dispatch \\u4EE3\\u66FF\\u4EE5\\u51CF\\u5C11\\u590D\\u6742\\u5EA6\\uFF0C\\u4E0D\\u8FC7\\u9700\\u8981\\u8003\\u8651\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"dynamic dispatch \\u6709\\u6027\\u80FD\\u635F\\u8017\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u590D\\u6742\\u7684\\u60C5\\u51B5\\u4E0B Rust \\u4E0D\\u77E5\\u9053\\u5982\\u4F55\\u6784\\u5EFA vtable\\uFF08&dyn Hash + Eq\\uFF09\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"static dispatch \\u7684\\u4EE3\\u7801\\u7528\\u6237\\u53EF\\u4EE5\\u81EA\\u5DF1\\u8C03\\u7528\\u65F6\\u4F20\\u5165 trait object \\u4EE5 dynamic dispatch \\u7684\\u65B9\\u5F0F\\u4F7F\\u7528\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"fn foo<T: Debug>(f: T) {\\n  dbg!(f);\\n}\\n\\nfn main() {\\n  let d: &dyn Debug = &\\\"hah\\\".to_owned();\\n  foo(d);\\n}\\n\")), mdx(\"p\", null, \"\\u6240\\u4EE5\\u5BF9 lib \\u6765\\u8BF4 static dispatch \\u7684\\u63A5\\u53E3\\u66F4\\u597D\\uFF0Capp \\u6765\\u8BF4\\u56E0\\u4E3A\\u662F\\u6700\\u4E0B\\u6E38\\u4E24\\u79CD\\u90FD\\u53EF\\u4EE5\"), mdx(\"p\", null, \"\\u4E00\\u5F00\\u59CB\\u4F7F\\u7528\\u5177\\u4F53\\u7C7B\\u578B\\u4E4B\\u540E\\u9010\\u6E10\\u6539\\u4E3A\\u6CDB\\u578B\\u662F\\u53EF\\u884C\\u7684\\uFF0C\\u4F46\\u5E76\\u4E0D\\u4E00\\u5B9A\\u90FD\\u662F\\u5411\\u540E\\u517C\\u5BB9\\u7684\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"fn foo(v: &Vec<i32>) {}\\n// =>\\nfn foo(v: impl AsRef<[i32]>)\\n// \\u867D\\u7136 Vec<T> \\u5B9E\\u73B0\\u4E86 AsRef<T>\\uFF0C\\u4F46\\u7528\\u6237\\u53EF\\u80FD\\u4F1A\\u8FD9\\u6837\\u8C03\\u7528\\uFF1A\\nfoo(&iter.collect()) // \\u5BFC\\u81F4 collect \\u7684\\u7C7B\\u578B\\u63A8\\u65AD\\u5931\\u6548\\n\")), mdx(\"h4\", {\n    \"id\": \"object-safety\"\n  }, \"Object Safety\"), mdx(\"p\", null, \"trait \\u7684\\u8BBE\\u8BA1\\u5E94\\u8BE5\\u8003\\u8651\\u5230\\u662F\\u5426\\u6709 trait object \\u7684\\u573A\\u666F\\uFF0C\\u4E00\\u822C\\u503E\\u5411\\u4E8E\\u9700\\u8981\\u5B9E\\u73B0\\uFF0C\\u56E0\\u4E3A\\u589E\\u52A0\\u4E86 dyn \\u7684\\u4F7F\\u7528\\u65B9\\u5F0F\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u6CDB\\u578B\\u65B9\\u6CD5\\u4E0A\\u7684\\u6CDB\\u578B\\u53EF\\u4E0D\\u53EF\\u4EE5\\u653E\\u5230 trait \\u4E0A\\uFF0C\\u4EE5\\u4FDD\\u8BC1 object safety\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u53EF\\u4EE5\\u4E3A\\u4E0D\\u9700\\u8981 dyn \\u7684\\u65B9\\u6CD5\\u6DFB\\u52A0 Self: Sized\")), mdx(\"p\", null, \"object safety \\u662F API \\u7684\\u4E00\\u90E8\\u5206\\uFF0C\\u9700\\u6CE8\\u610F\\u517C\\u5BB9\\u6027\"), mdx(\"h4\", {\n    \"id\": \"borrowed-vs-owned\"\n  }, \"Borrowed vs. Owned\"), mdx(\"p\", null, \"API \\u5BF9\\u6570\\u636E\\u7684 Owned \\u548C Borrowed \\u8981\\u4ED4\\u7EC6\\u5224\\u65AD\"), mdx(\"h4\", {\n    \"id\": \"fallible-and-blocking-destructors\"\n  }, \"Fallible and Blocking Destructors\"), mdx(\"p\", null, \"\\u4E00\\u4E9B I/O \\u7684 destructor \\u53EF\\u80FD\\u963B\\u585E\\u751A\\u81F3\\u5931\\u8D25\\uFF0C\\u9700\\u8981\\u663E\\u5F0F\\u7684\\u89E3\\u6784\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Option::take\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"std::mem::take\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ManuallyDrop\"), \" \\u53EF\\u80FD\\u4F1A\\u6BD4\\u8F83\\u6709\\u7528\"), mdx(\"h3\", {\n    \"id\": \"obvious\"\n  }, \"Obvious\"), mdx(\"p\", null, \"\\u6709\\u65F6\\u6211\\u4EEC\\u7684\\u7C7B\\u578B\\u9700\\u8981\\u5148\\u8C03\\u7528 foo \\u7136\\u540E\\u518D\\u8C03\\u7528 bar\\uFF0C\\u4F46\\u7528\\u6237\\u5E76\\u4E0D\\u77E5\\u9053\"), mdx(\"h4\", {\n    \"id\": \"documentation\"\n  }, \"Documentation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u4F1A panic \\u7684\\u51FD\\u6570\\u5199\\u660E Panic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Err \\u8FD4\\u56DE\\u7684\\u539F\\u56E0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u5BF9\\u4E8E unsafe \\u7684\\u51FD\\u6570\\u5199\\u660E Safety\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"examples \\u8D28\\u91CF\\uFF0C\\u7528\\u6237\\u5F88\\u53EF\\u80FD\\u590D\\u5236\\u8FD9\\u91CC\\u7684\\u4EE3\\u7801\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u7EC4\\u7EC7\\u6587\\u6863\\uFF0C\\u6587\\u6863\\u5185\\u94FE\\u63A5\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"#[doc(hidden)]\"), \" \\u6807\\u8BB0\\u4E0D\\u60F3\\u516C\\u5F00\\u7684\\u63A5\\u53E3\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"#[doc(cfg(..))]\"), \" \\u6807\\u8BB0\\u67D0\\u4E9B\\u60C5\\u51B5\\u4E0B\\u624D\\u4F1A\\u7528\\u5230\\u7684\\u63A5\\u53E3\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"#[doc(alias = \\\"...\\\")]\"), \" \\u65B9\\u4FBF\\u641C\\u7D22\")), mdx(\"h4\", {\n    \"id\": \"type-system-guidance\"\n  }, \"Type System Guidance\"), mdx(\"p\", null, \"newtype\\u3001enum\\u2026\\u2026 \\u5B9E\\u73B0 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"semantic typing\")), mdx(\"p\", null, \"zero-sized type \\u8868\\u793A\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"struct Grounded;\\nstruct Launched;\\n\\nstruct Rocket<Stage = Grounded> {\\n  stage: std::marker::PhantomData<Stage>,\\n}\\n\\nimpl Default for Rocket<Grounded> {}\\n\\nimpl Rocket<Grounded> {\\n  pub fn launch(self) -> Rocket<Launched> {}\\n}\\n\\nimpl Rocket<Launched> {\\n  pub fn accelerate(&mut self) {}\\n  pub fn decelerate(&mut self) {}\\n}\\n\\nimpl<Stage> Rocket<Stage> {\\n  pub fn color(&self) -> Color {}\\n  pub fn weight(&self) -> Kilograms {}\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"constrained\"\n  }, \"Constrained\"), mdx(\"p\", null, \"\\u5411\\u540E\\u517C\\u5BB9\"), mdx(\"h4\", {\n    \"id\": \"type-modifications\"\n  }, \"Type Modifications\"), mdx(\"p\", null, \"\\u5C3D\\u91CF\\u5C11\\u7684 pub \\u7ED9\\u7528\\u6237\\u4F1A\\u5E2E\\u52A9\\u6211\\u4EEC\\u63A7\\u5236\\u4EE3\\u7801\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[non_exhaustive]\"), \" \\u53EF\\u4EE5\\u907F\\u514D\\u7528\\u6237 match\\u3001\\u6784\\u9020\\u7B49\\u53EF\\u80FD\\u9700\\u8981\\u679A\\u4E3E\\u7C7B\\u578B\\u6240\\u6709\\u5C5E\\u6027\\u7684\\u64CD\\u4F5C\\uFF0C\\u7B49\\u7C7B\\u578B\\u7A33\\u5B9A\\u540E\\u8BF7\\u907F\\u514D\\u4F7F\\u7528\\u5B83\"), mdx(\"h4\", {\n    \"id\": \"trait-implementations\"\n  }, \"Trait Implementations\"), mdx(\"p\", null, \"trait \\u7684\\u4FEE\\u6539\\u5F80\\u5F80\\u662F break \\u7684\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"pub trait CanUseCannotImplement: sealed::Sealed {\\n  // ...\\n}\\n\\nmod sealed {\\n  pub trait Sealed {}\\n  impl<T> Sealed for T where T: TraitBounds {}\\n}\\n\\nimpl<T> CanUseCannotImplement for T where T: TraitBounds {}\\n\")), mdx(\"h2\", {\n    \"id\": \"error-handling\"\n  }, \"Error Handling\"), mdx(\"h3\", {\n    \"id\": \"representing-errors\"\n  }, \"Representing Errors\"), mdx(\"h4\", {\n    \"id\": \"enumeration\"\n  }, \"Enumeration\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u5B9E\\u73B0 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"std::error::Error\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u5B9E\\u73B0 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"std::fmt::Display\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u5C3D\\u91CF\\u5B9E\\u73B0 Send\\u3001Sync\\uFF0C\\u628A Rc\\u3001RefCell \\u653E\\u5230 Error \\u4E2D\\u65F6\\u9700\\u8981\\u8003\\u8651 Error \\u662F\\u5426\\u9700\\u8981\\u8DE8\\u7EBF\\u7A0B\")), mdx(\"p\", null, \"see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://doc.rust-lang.org/src/std/io/error.rs.html#58-60\"\n  }), \"std::io::Error\")), mdx(\"h4\", {\n    \"id\": \"opaque-errors\"\n  }, \"Opaque Errors\"), mdx(\"p\", null, \"\\u5E76\\u4E0D\\u662F\\u6240\\u6709 lib \\u90FD\\u9002\\u5408 Enumeration \\u8FD9\\u79CD\\u65B9\\u6848\\uFF0C\\u5BF9\\u4E8E\\u9519\\u8BEF\\u539F\\u56E0\\u5E76\\u4E0D\\u91CD\\u8981\\u7684\\u60C5\\u51B5\\u66F4\\u9002\\u5408\\u7528\\u4E0D\\u900F\\u660E\\u7684 Error \\u8868\\u793A\\uFF0C\\u6BD4\\u5982\\uFF1A\\u4E00\\u4E2A\\u56FE\\u50CF\\u89E3\\u7801\\u5E93\\uFF0C\\u89E3\\u7801\\u5931\\u8D25\\u65F6\\u56FE\\u50CF\\u5934\\u4E2D\\u7684\\u5927\\u5C0F\\u5B57\\u6BB5\\u65E0\\u6548\\u6216\\u8005\\u538B\\u7F29\\u7B97\\u6CD5\\u672A\\u80FD\\u89E3\\u538B\\u4E00\\u4E2A\\u5757\\u8FD9\\u79CD\\u5177\\u4F53\\u7684\\u539F\\u56E0\\u5BF9\\u7528\\u6237\\u6765\\u8BF4\\u4E5F\\u8BB8\\u5E76\\u4E0D\\u91CD\\u8981\\uFF0C\\u56E0\\u4E3A\\u5373\\u4F7F\\u77E5\\u9053\\u4E86\\u4E5F\\u65E0\\u6CD5\\u6062\\u590D\\u9519\\u8BEF\\uFF0C\\u800C\\u4E0D\\u900F\\u660E\\u9519\\u8BEF\\u4F7F\\u5E93\\u66F4\\u5BB9\\u6613\\u4F7F\\u7528\\uFF0C\\u5927\\u5927\\u51CF\\u5C0F API \\u590D\\u6742\\u5EA6\\uFF08\\u5185\\u90E8\\u53EF\\u4EE5\\u7EC6\\u5316\\uFF0C\\u4F46\\u6CA1\\u5FC5\\u8981\\u66B4\\u9732\\u7ED9\\u7528\\u6237\\uFF09\"), mdx(\"p\", null, \"\\u901A\\u5E38\\u662F \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box<dyn Error + ...>\"), \" \\u8FD9\\u6837\\u7684\\uFF0C\\u4F46 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box<dyn Error + Send + Sync + 'static>\"), \" \\u53EF\\u4EE5\\u4F7F\\u7528\\u6237\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Error::downcast_ref\"), \" \\u7279\\u5316 Error \\u8FDB\\u884C\\u5904\\u7406\"), mdx(\"h3\", {\n    \"id\": \"propagating-errors\"\n  }, \"Propagating Errors\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"?\"), \" \\u5176\\u5B9E\\u5C31\\u662F \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"std::Ops::Try\"), \" trait\\uFF0C\\u4E0D\\u8FC7\\u76EE\\u524D\\u6765\\u6CA1\\u6709\\u7A33\\u5B9A\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try { ... }\"), \" try block \\u7684\\u573A\\u666F\\uFF0C\\u4E0D\\u8FC7\\u4E5F\\u6CA1\\u7A33\\u5B9A\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"fn do_it() -> Result<(), Error> {\\n  let t = Thing::setup();\\n  t.work()?; // Err \\u540E\\u4F1A\\u76F4\\u63A5\\u8FD4\\u56DE\\uFF0C\\u6CA1\\u6709 cleanup\\n  t.cleanup();\\n  Ok(())\\n}\\n\\nfn try_it() -> Result<(), Error> {\\n  let t = Thing::setup();\\n  let r = try { t.work()? };\\n  t.cleanup();\\n  r\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"project-structure\"\n  }, \"Project Structure\"), mdx(\"h3\", {\n    \"id\": \"features\"\n  }, \"Features\"), mdx(\"p\", null, \"\\u6DFB\\u52A0 optional \\u7684 crate \\u548C\\u6539\\u53D8\\u4EE3\\u7801\\uFF0C\\u4EE5\\u5F00\\u542F\\u989D\\u5916\\u529F\\u80FD\"), mdx(\"h4\", {\n    \"id\": \"defining-and-including-features\"\n  }, \"Defining and Including Features\"), mdx(\"p\", null, \"Cargo \\u4E2D\\u53EF\\u4EE5\\u5B9A\\u4E49 features\\uFF0C\\u9ED8\\u8BA4\\u4F7F\\u7528\\u7684\\u53EF\\u4EE5\\u5B9A\\u4E49\\u4E3A default\"), mdx(\"p\", null, \"Cargo \\u4F7F\\u6BCF\\u4E2A\\u53EF\\u9009\\u4F9D\\u8D56\\u5173\\u7CFB\\u90FD\\u6210\\u4E3A\\u4E0E\\u4F9D\\u8D56\\u5173\\u7CFB\\u540C\\u540D\\u7684 features\\uFF0C\\u6240\\u4EE5\\u4F1A\\u6709\\u547D\\u540D\\u51B2\\u7A81\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-toml\"\n  }), \"[features]\\nderive = [\\\"syn\\\"]\\n\\n[dependencies]\\nsyn = { version = \\\"1\\\", optional = true }\\n\")), mdx(\"p\", null, \"\\u4E5F\\u53EF\\u4EE5\\u5F00\\u542F\\u4F9D\\u8D56\\u7684\\u4E00\\u4E9B features\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-toml\"\n  }), \"[features]\\nderive = [\\\"syn/derive\\\"]\\n\\n[dependencies]\\nsyn = { version = \\\"1\\\", optional = true }\\n\")), mdx(\"h4\", {\n    \"id\": \"using-features-in-your-crate\"\n  }, \"Using Features in Your Crate\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[cfg(feature = \\\"some-feature\\\")]\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cfg!(feature = \\\"some-feature))\"), \" \\u6765\\u63A7\\u5236 conditional compilation\"), mdx(\"h2\", {\n    \"id\": \"testing\"\n  }, \"Testing\"), mdx(\"h3\", {\n    \"id\": \"rust-testing-mechanisms\"\n  }, \"Rust Testing Mechanisms\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[test]\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[should_panic]\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[cfg(test)]\"), \", Integration tests (the tests in tests/), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"compile_fail in doctests\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"# in doctests\"), \"...\"), mdx(\"h3\", {\n    \"id\": \"additional-testing-tools\"\n  }, \"Additional Testing Tools\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"clippy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cargo-fuzz\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"miri\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"loom\")), mdx(\"h2\", {\n    \"id\": \"marcos\"\n  }, \"Marcos\"), mdx(\"h3\", {\n    \"id\": \"declarative-macros\"\n  }, \"Declarative Macros\"), mdx(\"h4\", {\n    \"id\": \"when-to-use-them\"\n  }, \"When to Use Them\"), mdx(\"p\", null, \"\\u5F53\\u4F60\\u53D1\\u73B0\\u81EA\\u5DF1\\u53CD\\u590D\\u7F16\\u5199\\u76F8\\u540C\\u7684\\u4EE3\\u7801\\u65F6\\uFF0C\\u58F0\\u660E\\u5B8F\\u4F1A\\u5F88\\u6709\\u7528\"), mdx(\"h4\", {\n    \"id\": \"how-they-work\"\n  }, \"How They Work\"), mdx(\"p\", null, \"parse \\u7684\\u65F6\\u5019\\u9047\\u5230\\u58F0\\u660E\\u5B8F\\u4F1A\\u6839\\u636E\\u5B9A\\u4E49\\u8FDB\\u884C\\u5C55\\u5F00\\uFF08\\u5B9A\\u4E49\\u5FC5\\u987B\\u5728\\u8C03\\u7528\\u4E4B\\u524D\\u89E3\\u6790\\uFF09\\uFF0C\\u7531\\u4E8E\\u662F Rust \\u7F16\\u8BD1\\u5668\\u8FDB\\u884C\\u89E3\\u6790\\uFF0C\\u6240\\u4EE5\\u5B8F\\u7684\\u8BED\\u6CD5\\u5FC5\\u987B\\u662F\\u7F16\\u8BD1\\u5668\\u53EF\\u4EE5\\u8BC6\\u522B\\u7684 token\"), mdx(\"h4\", {\n    \"id\": \"how-to-write-declarative-macros\"\n  }, \"How to Write Declarative Macros\"), mdx(\"p\", null, \"Rust \\u7684\\u5B8F\\u662F\\u536B\\u751F\\u7684\\uFF0C\\u4E00\\u4E2A\\u58F0\\u660E\\u5B8F\\uFF08\\u901A\\u5E38\\uFF09\\u4E0D\\u80FD\\u5F71\\u54CD\\u90A3\\u4E9B\\u6CA1\\u6709\\u660E\\u786E\\u4F20\\u9012\\u7ED9\\u5B83\\u7684\\u53D8\\u91CF\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"macro_rules! let_foo {\\n  ($x:expr) => {\\n    let foo = $x;\\n  }\\n}\\n\\nlet foo = 1;\\nlet_foo!(2);\\nassert_eq!(foo, 1);\\n\")), mdx(\"p\", null, \"\\u5B8F\\u7684\\u8C03\\u7528\\u4E0D\\u80FD\\u53D7\\u8C03\\u7528\\u4F4D\\u7F6E\\u5F71\\u54CD\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"::std\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"::core\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$crate\"), \" \\u8FDB\\u884C\\u5BFC\\u5165\"), mdx(\"p\", null, \"\\u5B8F\\u53EA\\u6709\\u58F0\\u660E\\u540E\\u624D\\u5B58\\u5728\\uFF0C\\u5982\\u679C\\u4E00\\u4E2A mod \\u60F3\\u7528\\u53E6\\u4E00\\u4E2A mod \\u4E2D\\u7684\\u5B8F\\uFF0C\\u90A3\\u4E48\\u58F0\\u660E\\u8FD9\\u4E2A\\u5B8F\\u7684 mod \\u5FC5\\u987B\\u653E\\u5728\\u53E6\\u4E00\\u4E2A mod \\u524D\\u9762\\uFF1B\\u6216\\u8005\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[macro_export]\"), \" \\u6807\\u8BB0\\u5B8F\\uFF0C\\u8FD9\\u4F1A\\u5C06\\u5B8F\\u63D0\\u5347\\u5230 crate \\u7684\\u6839\\u90E8\\u5E76\\u6807\\u8BB0\\u4E3A pub \\u7684\\uFF0C\\u8FD9\\u6837\\u5C31\\u53EF\\u4EE5\\u5728\\u4EFB\\u4F55\\u5730\\u65B9\\u6216\\u5176\\u4ED6\\u4F9D\\u8D56\\u4E2D\\u4F7F\\u7528\"), mdx(\"h3\", {\n    \"id\": \"procedural-macros\"\n  }, \"Procedural Macros\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fn(TokenStream) -> TokenStream\")), mdx(\"h4\", {\n    \"id\": \"types-of-procedural-macros\"\n  }, \"Types of Procedural Macros\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"function-like macros, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"macro_rules!\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"attribute macros, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"#[test]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"derive macros, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"#[derive(Serialize)]\"))), mdx(\"h4\", {\n    \"id\": \"the-cost-of-procedural-macros\"\n  }, \"The Cost of Procedural Macros\"), mdx(\"p\", null, \"\\u589E\\u52A0\\u4E86\\u51E0\\u4E2A\\u5927\\u5E93\\uFF0C\\u8FC7\\u7A0B\\u5B8F\\u751F\\u6210\\u7684\\u4EE3\\u7801\\uFF0C\\u5BFC\\u81F4\\u7F16\\u8BD1\\u65F6\\u95F4\\u589E\\u52A0\"), mdx(\"h4\", {\n    \"id\": \"so-you-think-you-want-a-macro\"\n  }, \"So You Think You Want a Macro\"), mdx(\"p\", null, \"\\u6D3E\\u751F\\u5B8F derive macros\\uFF1A\\u5B9E\\u73B0 derive\\uFF0C\\u5F88\\u591A\\u7C7B\\u578B\\u90FD\\u9700\\u8981\\u81EA\\u52A8\\u5B9E\\u73B0 trait \\u7684\\u65F6\\u5019\\u4F7F\\u7528\"), mdx(\"p\", null, \"function-like macros\\uFF1A\\u5DF2\\u6709\\u58F0\\u660E\\u5B8F\\u4F46\\u662F\\u8D8A\\u6765\\u8D8A\\u96BE\\u7EF4\\u62A4\\uFF0C\\u6216\\u8005\\u6709\\u7684\\u60F3\\u5728\\u7F16\\u8BD1\\u671F\\u8BA1\\u7B97\\u800C const \\u5B9E\\u73B0\\u4E0D\\u4E86\"), mdx(\"h4\", {\n    \"id\": \"how-do-they-work\"\n  }, \"How Do They Work?\"), mdx(\"p\", null, \"AST \\u5C42\\u9762\\u8FDB\\u884C\\u64CD\\u4F5C\"), mdx(\"h2\", {\n    \"id\": \"asynchronous-programing\"\n  }, \"Asynchronous Programing\"), mdx(\"h3\", {\n    \"id\": \"whats-the-deal-with-asynchrony\"\n  }, \"What\\u2019s the Deal with Asynchrony?\"), mdx(\"p\", null, \"\\u540C\\u6B65\\u63A5\\u53E3 - \\u591A\\u7EBF\\u7A0B\"), mdx(\"p\", null, \"\\u5F02\\u6B65\\u63A5\\u53E3 - Standardized Polling (Future)\"), mdx(\"h3\", {\n    \"id\": \"ergonomic-futures\"\n  }, \"Ergonomic Futures\"), mdx(\"p\", null, \"async/await\\uFF08\\u548C generator fn\\uFF09\\u4F1A\\u88AB\\u7F16\\u8BD1\\u4E3A\\u6709\\u9650\\u72B6\\u6001\\u673A\\uFF0C\\u4EE5\\u5B9E\\u73B0\\u96F6\\u6210\\u672C\\u62BD\\u8C61 \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=skos4B5x7qE\"\n  }), \"RustLatam 2019 - Without Boats: Zero-Cost Async IO\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/note/rust/rust-for-rustaceans"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}