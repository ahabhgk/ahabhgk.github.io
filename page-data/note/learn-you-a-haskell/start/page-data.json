{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/note/learn-you-a-haskell/start","result":{"data":{"page":{"__typename":"MdxPage","title":"从零开始","slug":"/note/learn-you-a-haskell/start","excerpt":"5 / 2  中的  /  称为中缀函数 bar (bar 3)  不表示 bar 和 3 作为 bar 的两个参数，表示  bar 3  的结果作为 bar 的参数 if 语句是个表达式，必须有返回结果 List 内部类型必须相同，不关心数量， ++  用来连接两个 List…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"从零开始\",\n  \"slug\": \"/note/learn-you-a-haskell/start\",\n  \"date\": \"2020-06-01T00:00:00.000Z\",\n  \"description\": \"《Haskell 趣学指南》读书笔记\",\n  \"tags\": [\"Note\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> 5 / 2\\n2.5\\n> True && False\\nFalse\\n> False || True\\nTrue\\n> not (True && True)\\nFalse\\n> 5 == 5\\nTrue\\n> 5 /= 5\\nFalse\\n> \\\"Hello\\\" == \\\"Hello\\\"\\nTrue\\n> 5 == \\\"Hello\\\" ;; Error \\u4E0D\\u540C\\u7C7B\\u578B\\n> 5 + 4.0\\n9.0 ;; 5 \\u65E2\\u53EF\\u4EE5\\u770B\\u4F5C\\u6574\\u5F62\\u4E5F\\u53EF\\u4EE5\\u770B\\u4F5C\\u6D6E\\u70B9\\u6570\\uFF0C4.0 \\u53EA\\u80FD\\u770B\\u505A\\u6D6E\\u70B9\\u6570\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"5 / 2\"), \" \\u4E2D\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/\"), \" \\u79F0\\u4E3A\\u4E2D\\u7F00\\u51FD\\u6570\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> succ 9 + max 5 4 + 1 ;; succ \\u8FD4\\u56DE\\u4E00\\u4E2A\\u6570\\u7684\\u540E\\u7EE7\\n16 ;; \\u51FD\\u6570\\u6709\\u6700\\u9AD8\\u7684\\u8C03\\u7528\\u4F18\\u5148\\u7EA7\\uFF0C\\u76F8\\u5F53\\u4E8E (succ 9) + (max 5 4) + 1\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bar (bar 3)\"), \" \\u4E0D\\u8868\\u793A bar \\u548C 3 \\u4F5C\\u4E3A bar \\u7684\\u4E24\\u4E2A\\u53C2\\u6570\\uFF0C\\u8868\\u793A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bar 3\"), \" \\u7684\\u7ED3\\u679C\\u4F5C\\u4E3A bar \\u7684\\u53C2\\u6570\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> doubleSmallNumber x = if x > 100 then x else x * 2\\n\")), mdx(\"p\", null, \"if \\u8BED\\u53E5\\u662F\\u4E2A\\u8868\\u8FBE\\u5F0F\\uFF0C\\u5FC5\\u987B\\u6709\\u8FD4\\u56DE\\u7ED3\\u679C\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> [1, 2, 3, 4] ++ [5, 6, 7, 8]\\n[1, 2, 3, 4, 5, 6, 7, 8]\\n> \\\"Hello\\\" ++ \\\" \\\" ++ \\\"World\\\"\\n\\\"Hello World\\\"\\n> ['H', 'e', 'l', 'l', 'o'] ++ [' '] ++ ['W', 'o', 'r', 'l', 'd']\\n\\\"Hello World\\\"\\n\")), mdx(\"p\", null, \"List \\u5185\\u90E8\\u7C7B\\u578B\\u5FC5\\u987B\\u76F8\\u540C\\uFF0C\\u4E0D\\u5173\\u5FC3\\u6570\\u91CF\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"++\"), \" \\u7528\\u6765\\u8FDE\\u63A5\\u4E24\\u4E2A List\\uFF0C\\u5B57\\u7B26\\u4E32\\u662F\\u5B57\\u7B26\\u5217\\u8868\\u7684\\u8BED\\u6CD5\\u7CD6\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> 'A' : \\\" SMALL CAT\\\"\\n\\\"A SMALL CAT\\\"\\n> 1 : [2, 3, 4]\\n[1, 2, 3, 4]\\n> \\\"Cat\\\" !! 1\\n'a'\\n> [1, 2, 3] !! 0\\n1\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":\"), \" \\u7528\\u6765\\u6DFB\\u52A0\\u5230 List \\u524D\\u7AEF\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"!!\"), \" \\u7528\\u6765\\u901A\\u8FC7\\u4E0B\\u6807\\u53D6\\u6570\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[1, 2, 3]\"), \" \\u662F \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1:2:3:[]\"), \" \\u7684\\u8BED\\u6CD5\\u7CD6\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> [[1, 2], []]\\n[[1, 2], []]\\n\")), mdx(\"p\", null, \"List \\u4E2D\\u7684 List \\u53EF\\u4EE5\\u662F\\u4E0D\\u540C\\u957F\\u5EA6\\u7684\\uFF0C\\u4F46\\u5185\\u90E8\\u5143\\u7D20\\u5FC5\\u987B\\u540C\\u7C7B\\u578B\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> [3, 2, 1] > [2, 3, 4]\\nTrue\\n> [3, 4, 2] > [3, 4]\\nTrue\\n> [2, 3, 4] == [2, 3, 4]\\n\")), mdx(\"p\", null, \"List \\u7684\\u6BD4\\u8F83\\u6839\\u636E\\u4E0B\\u6807\\u4F9D\\u6B21\\u6BD4\\u8F83\"), mdx(\"p\", null, \"List \\u4E2D\\u7684\\u5404\\u79CD\\u64CD\\u4F5C\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> head [1, 2, 3, 4]\\n1\\n> tail [1, 2, 3, 4]\\n[2, 3, 4]\\n> last [1, 2, 3, 4]\\n4\\n> init [1, 2, 3, 4]\\n[1, 2, 3]\\n> head [] ;; Error head\\u3001tail\\u3001last\\u3001init \\u90FD\\u8981\\u5C0F\\u5FC3\\u7A7A List\\n> length [1, 2, 3]\\n3\\n> null [1, 2, 3]\\nFalse\\n> null []\\nTrue\\n> reverse [1, 2, 3]\\n[3, 2, 1]\\n> take 2 [1, 2, 3]\\n[1, 2]\\n> drop 2 [1, 2, 3]\\n[3]\\n> maximum [1, 2, 3]\\n3\\n> minimum [1, 2, 3]\\n1\\n> sum [1, 2, 3]\\n6\\n> product [1, 2, 3, 4]\\n24\\n> 4 `elem` [1, 2, 3, 4]\\nTrue\\n> 0 `elem` [1, 2, 3, 4]\\nFalse\\n\")), mdx(\"p\", null, \"Range\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> [2, 4 .. 10]\\n[2, 4, 6, 8, 10]\\n> [0.1, 0.3 .. 1]\\n[0.1, 0.3, 0.5, 0.7, 0.8999999999999999, 1.0999999999999999] ;; \\u8981\\u907F\\u514D\\u5C0F\\u6570 Range\\n> take 24 [13, 26 ..] ;; Haskell \\u662F\\u60F0\\u6027\\u7684\\uFF0C\\u5B83\\u4E0D\\u4F1A\\u5BF9\\u65E0\\u9650\\u957F\\u5EA6\\u7684 List \\u6C42\\u503C\\n> take 10 (cycle [1, 2, 3])\\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1]\\n> take 5 (repeat 1)\\n[1, 1, 1, 1, 1]\\n> replicate 3 10\\n[10, 10, 10]\\n\")), mdx(\"p\", null, \"List Comprehension\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> [ x * 2 | x <- [1..5] ]\\n[2, 4, 6, 8, 10]\\n> boomBangs xs = [ if x < 10 then \\\"BOOM!\\\" else \\\"BANG!\\\" | x <- xs, odd x]\\n> boomBangs [7..13]\\n[\\\"BOOM!\\\",\\\"BOOM!\\\",\\\"BANG!\\\",\\\"BANG!\\\"]\\n> [ x * y | x <- [2, 5, 10], y <- [8, 10, 11] ]\\n[16,20,22,40,50,55,80,100,110]\\n> length xs = sum [ 1 | _ <- xs ]\\n> evenList = [ [ x | x <- xs, even x ] | xs <- xxs ]\\n> evenList [[1, 3, 5, 2, 4], [6, 8, 9, 5]]\\n[[2, 4], [6, 8]]\\n\")), mdx(\"p\", null, \"Tuple \\u6570\\u91CF\\u660E\\u786E\\uFF0C\\u4E0D\\u5173\\u5FC3\\u7C7B\\u578B\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> [(1, \\\"two\\\"), (3, \\\"four\\\")]\\n[(1, \\\"two\\\"), (3, \\\"four\\\")] ;; Tuple \\u4E5F\\u53EF\\u4EE5\\u50A8\\u5B58 List\\n> [(1, 2), (3, 4, 5)] ;; Error \\u6570\\u91CF\\u4E0D\\u540C\\n> [(1, \\\"two\\\"), (3, 4)]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> fst (\\\"Wow\\\", False)\\n\\\"Wow\\\"\\n> snd (\\\"Wow\\\", True)\\nTrue\\n\")), mdx(\"p\", null, \"fst snd \\u53EA\\u5BF9 Pair Tuple \\u6709\\u6548\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> :t zip\\nzip :: [a] -> [b] -> [(a, b)]\\n> zip [1 .. 5] [\\\"one\\\", \\\"two\\\", \\\"three\\\", \\\"four\\\", \\\"five\\\"]\\n[(1,\\\"one\\\"),(2,\\\"two\\\"),(3,\\\"three\\\"),(4,\\\"four\\\"),(5,\\\"five\\\")]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> let rightTriangles = [ (a, b, c) | c <- [1..10], b <- [1..c], a <- [1..b], a ^ 2 + b ^ 2 == c ^ 2 ]\\n> rightTriangles\\n[(3,4,5),(6,8,10)]\\n\")), mdx(\"h2\", {\n    \"id\": \"sum\"\n  }, \"Sum\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"not\"), \"\\uFF1A\\u975E\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/=\"), \"\\uFF1A\\u4E0D\\u7B49\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"++\"), \"\\uFF1A List \\u62FC\\u63A5\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'a':\\\"bc\\\"\"), \"\\uFF1AList \\u52A0\\u5165\\u5934\\u90E8\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[1, 2, 3] !! 0\"), \"\\uFF1A\\u53D6\\u4E0B\\u6807\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"head tail last init take drop\"), \"\\uFF1AList \\u622A\\u53D6\\u64CD\\u4F5C\\uFF0C\\u5C0F\\u5FC3\\u7A7A\\u6570\\u7EC4\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"length\"), \"\\uFF1A\\u53D6 List Length\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \"\\uFF1A\\u5224\\u65AD List \\u662F\\u5426\\u4E3A\\u7A7A\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reverse\"), \"\\uFF1AList \\u9006\\u5E8F\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minimum maximum\"), \"\\uFF1AList \\u6700\\u5927\\u6700\\u5C0F\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sum product\"), \"\\uFF1AList \\u6C42\\u548C\\u6C42\\u79EF\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"1 \", \"`\", \"elem\", \"`\", \" \", \"[1, 2, 3]\", \"\\uFF1A\\u5224\\u65AD List \\u662F\\u5426\\u5B58\\u5728\\u8BE5\\u5143\\u7D20\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[2, 4..10]\"), \"\\uFF1ARange\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[ x * 2 | x <- [1..5] ]\"), \"\\uFF1AList Comprehension\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(True, 1)\"), \"\\uFF1ATuple\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/note/learn-you-a-haskell/start"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}