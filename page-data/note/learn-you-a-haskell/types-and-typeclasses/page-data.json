{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/note/learn-you-a-haskell/types-and-typeclasses","result":{"data":{"page":{"__typename":"MdxPage","title":"Types and Typeclasses","slug":"/note/learn-you-a-haskell/types-and-typeclasses","excerpt":"Types 静态类型 类型推导 函数类型 Int 有限，Integer 无限 Type variables Type classes 定义类型的行为，如果一个类型属于某个 Typeclass，那他必须实现该 Typeclass 所描述的行为 Eq a 表示 a 这个 type…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Types and Typeclasses\",\n  \"slug\": \"/note/learn-you-a-haskell/types-and-typeclasses\",\n  \"date\": \"2020-06-07T00:00:00.000Z\",\n  \"description\": \"《Haskell 趣学指南》读书笔记\",\n  \"tags\": [\"Note\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"types\"\n  }, \"Types\"), mdx(\"p\", null, \"\\u9759\\u6001\\u7C7B\\u578B\"), mdx(\"p\", null, \"\\u7C7B\\u578B\\u63A8\\u5BFC\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> :t 'a'\\n'a' :: Char\\n> :t \\\"hello\\\"\\n\\\"hello\\\" :: [Char] ;; \\u8868\\u793A List\\n> :t True\\nTrue :: Bool\\n> :t (True, \\\"a\\\")\\n(True, \\\"a\\\") :: (Bool, [Char]) ;; \\u8868\\u793A Tuple\\n\")), mdx(\"p\", null, \"\\u51FD\\u6570\\u7C7B\\u578B\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"removeNonUppercase :: String -> String ;; String \\u7B49\\u4EF7\\u4E8E [Char]\\nremoveNonUppercase st = [ c | c <- st, c `elem` ['A' .. 'Z'] ]\\n\\naddThree :: Int -> Int -> Int -> Int ;; \\u67EF\\u91CC\\u5316\\uFF0C\\u53C2\\u6570\\u4E4B\\u95F4\\u7528 -> \\u8FDE\\u63A5\\naddThree x y z = x + y + z\\n\")), mdx(\"p\", null, \"Int \\u6709\\u9650\\uFF0CInteger \\u65E0\\u9650\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"factorial Integer -> Integer\\nfactorial n = product [1 .. n]\\n\")), mdx(\"h2\", {\n    \"id\": \"type-variables\"\n  }, \"Type variables\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> :t head\\nhead :: [a] -> a\\n> :t fst\\nfst :: (a, b) -> a ;; a b \\u4E0D\\u4E00\\u5B9A\\u662F\\u4E0D\\u540C\\u7684\\u7C7B\\u578B\\n\")), mdx(\"h2\", {\n    \"id\": \"type-classes\"\n  }, \"Type classes\"), mdx(\"p\", null, \"\\u5B9A\\u4E49\\u7C7B\\u578B\\u7684\\u884C\\u4E3A\\uFF0C\\u5982\\u679C\\u4E00\\u4E2A\\u7C7B\\u578B\\u5C5E\\u4E8E\\u67D0\\u4E2A Typeclass\\uFF0C\\u90A3\\u4ED6\\u5FC5\\u987B\\u5B9E\\u73B0\\u8BE5 Typeclass \\u6240\\u63CF\\u8FF0\\u7684\\u884C\\u4E3A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> :t (==)\\n(==) :: Eq a => a -> a -> Bool\\n> :t (>)\\n(>) :: Ord a => a -> a -> Bool\\n\")), mdx(\"p\", null, \"Eq a \\u8868\\u793A a \\u8FD9\\u4E2A type var \\u5FC5\\u987B\\u5C5E\\u4E8E Eq \\u8FD9\\u4E2A typeclass\\uFF0C\\u5B9E\\u73B0 Eq \\u7684\\u884C\\u4E3A\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Eq\\uFF1A\\u53EF\\u5224\\u65AD\\u76F8\\u7B49\\u6027\\u7684\\u7C7B\\u578B\\uFF0C\\u63D0\\u4F9B\\u5B9E\\u73B0\\u7684\\u51FD\\u6570\\u662F == \\u548C /=\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Ord\\uFF1A\\u53EF\\u6BD4\\u8F83\\u5927\\u5C0F\\u7C7B\\u578B\\uFF0C< > <= >=\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> :t show\\nshow :: Show a => a -> String\\n> :t read\\nread :: Read a => String -> a\\n> show True\\n\\\"True\\\"\\n> read \\\"5\\\" :: Int\\n5\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Show\\uFF1A\\u53EF\\u7528\\u5B57\\u7B26\\u4E32\\u8868\\u793A\\u7684\\u7C7B\\u578B\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Read\\uFF1A\\u4E0E Show \\u76F8\\u53CD\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> [LT .. GT]\\n[LT, EQ, GT]\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Enum\\uFF1A\\u8FDE\\u7EED\\u7684\\u7C7B\\u578B\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> :t maxBound\\nmaxBound :: Bounded a => a\\n> :t minBound\\nminBound :: Bounded a => a\\n> minBound :: Int\\n-9223372036854775808\\n> maxBound :: Int\\n9223372036854775807\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bounded\\uFF1A\\u6709\\u4E0A\\u4E0B\\u9650\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-haskell\"\n  }), \"> :t (+)\\n(+) :: Num a => a -> a -> a\\n> :t 20\\n20 :: Num p => p\\n> :t fromIntegral\\nfromIntegral :: (Integral a, Num b) => a -> b\\n> fromIntegral (length [1, 2, 3]) + 3.2\\n6.2\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Num\\uFF1A\\u8868\\u793A\\u6570\\u5B57\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Integral\\uFF1A\\u8868\\u793A\\u6574\\u6570\\uFF0C\\u5305\\u542B Int \\u548C Integer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Floating\\uFF1A\\u8868\\u793A\\u6D6E\\u70B9\\uFF0C\\u5305\\u542B Float \\u548C Double\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/note/learn-you-a-haskell/types-and-typeclasses"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}