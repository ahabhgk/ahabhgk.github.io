{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/note/a-simple-explanation-of-rxjs/rxreact","result":{"data":{"page":{"__typename":"MdxPage","title":"RxJS 驱动 React","slug":"/note/a-simple-explanation-of-rxjs/rxreact","excerpt":"使用 Subject 类似 EventBus 实现数据交互 Rx 实现 Redux","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"RxJS 驱动 React\",\n  \"slug\": \"/note/a-simple-explanation-of-rxjs/rxreact\",\n  \"date\": \"2020-02-22T00:00:00.000Z\",\n  \"description\": \"《深入浅出 RxJS》读书笔记\",\n  \"tags\": [\"Note\", \"A Simple Explanation of RxJS\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u4F7F\\u7528 Subject \\u7C7B\\u4F3C EventBus \\u5B9E\\u73B0\\u6570\\u636E\\u4EA4\\u4E92\"), mdx(\"h2\", {\n    \"id\": \"rx-实现-redux\"\n  }, \"Rx \\u5B9E\\u73B0 Redux\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"interface Action<T = any> {\\n  type: T,\\n}\\ninterface AnyAction extends Action {\\n  [key: string]: any,\\n}\\ntype Reducer<S = any, A extends Action = AnyAction> = (\\n  state: S | undefined,\\n  action: A\\n) => S\\ninterface Store<S, A extends Action = AnyAction> {\\n  getState(): S,\\n  dispatch(action: A): A,\\n  subscribe(listener: () => void): () => void,\\n}\\nconst createStore = <S, A extends Action>(reducer: Reducer<S, A>, initialState: S): Store<S, A> => {\\n  const action$ = new Subject<A>()\\n  let currentState = initialState\\n  const store$ = action$.pipe(\\n    startWith(initialState as unknown as A),\\n    scan(reducer),\\n    tap((state) => currentState = state),\\n  )\\n\\n  return {\\n    getState: () => currentState,\\n    dispatch: (action) => {\\n      action$.next(action)\\n      return action\\n    },\\n    subscribe: (listener) => {\\n      const subscription = store$.subscribe(listener)\\n      return () => {\\n        subscription.unsubscribe()\\n      }\\n    }\\n  }\\n}\\n\\nconst incrAction = {\\n  type: 'incr'\\n}\\nconst decrAction = {\\n  type: 'decr'\\n}\\nconst initialState = { num: 0 }\\n\\ntype CountActions = typeof incrAction | typeof decrAction\\n\\nconst re = (state = initialState, action: CountActions) => {\\n  switch (action.type) {\\n    case 'incr':\\n      return { num: state.num + 1 }\\n    case 'decr':\\n      return { num: state.num - 1 }\\n    default:\\n      return state\\n  }\\n}\\n\\nconst store = createStore(re, initialState)\\nstore.subscribe(console.log)\\nstore.dispatch(incrAction)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/note/a-simple-explanation-of-rxjs/rxreact"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}