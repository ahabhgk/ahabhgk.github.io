{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/note/a-simple-explanation-of-rxjs/subject","result":{"data":{"page":{"__typename":"MdxPage","title":"多播","slug":"/note/a-simple-explanation-of-rxjs/subject","excerpt":"多播就是让一个数据流的内容被多个 Observer 订阅 Subject BehaviorSubject ReplaySubject AsyncSubject 数据流的多播 单播 多播 广播 广播会影响全局环境，筛选消息的责任在接收方，同时多个广播时容易混乱，所以 RxJS…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"多播\",\n  \"slug\": \"/note/a-simple-explanation-of-rxjs/subject\",\n  \"date\": \"2020-02-20T00:00:00.000Z\",\n  \"description\": \"《深入浅出 RxJS》读书笔记\",\n  \"tags\": [\"Note\", \"A Simple Explanation of RxJS\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u591A\\u64AD\\u5C31\\u662F\\u8BA9\\u4E00\\u4E2A\\u6570\\u636E\\u6D41\\u7684\\u5185\\u5BB9\\u88AB\\u591A\\u4E2A Observer \\u8BA2\\u9605\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Subject\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"BehaviorSubject\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"ReplaySubject\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"AsyncSubject\"))), mdx(\"h2\", {\n    \"id\": \"数据流的多播\"\n  }, \"\\u6570\\u636E\\u6D41\\u7684\\u591A\\u64AD\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u5355\\u64AD\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u591A\\u64AD\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u5E7F\\u64AD\"))), mdx(\"p\", null, \"\\u5E7F\\u64AD\\u4F1A\\u5F71\\u54CD\\u5168\\u5C40\\u73AF\\u5883\\uFF0C\\u7B5B\\u9009\\u6D88\\u606F\\u7684\\u8D23\\u4EFB\\u5728\\u63A5\\u6536\\u65B9\\uFF0C\\u540C\\u65F6\\u591A\\u4E2A\\u5E7F\\u64AD\\u65F6\\u5BB9\\u6613\\u6DF7\\u4E71\\uFF0C\\u6240\\u4EE5 RxJS \\u4E0D\\u652F\\u6301\\u591A\\u64AD\"), mdx(\"p\", null, \"Cold Observable \\u65E0\\u6CD5\\u5B9E\\u73B0\\u591A\\u64AD\\uFF0C\\u6BCF\\u6B21\\u8BA2\\u9605\\u90FD\\u4F1A\\u662F\\u5F7C\\u6B64\\u4E4B\\u95F4\\u4E0D\\u540C\\u7684 Observable \\u5BF9\\u8C61\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const oba$ = interval(1000)\\noba$.subscribe(console.log)\\nsleep(3000).then(() => oba$.subscribe(console.log))\\n\")), mdx(\"h2\", {\n    \"id\": \"hot-数据流\"\n  }, \"Hot \\u6570\\u636E\\u6D41\"), mdx(\"p\", null, \"fromPromise\\u3001fromEvent\\u3001fromEventPattern \\u4EA7\\u751F Hot Observable\\uFF0C\\u8FD9\\u4E9B\\u6570\\u636E\\u6E90\\u90FD\\u6765\\u81EA\\u5916\\u90E8\\uFF08DOM\\u3001Promise\\u3001EventPattern\\u3001WebSocket\\u2026\\u2026\\uFF09\\uFF0C\\u4E0E Observable \\u65E0\\u5173\"), mdx(\"p\", null, \"Hot Observable \\u5B9E\\u73B0\\u591A\\u64AD\\uFF0C\\u4F46\\u6709\\u65F6 Cold Observable \\u4E5F\\u9700\\u8981\\u5B9E\\u73B0\\u591A\\u64AD\\uFF0C\\u8FD9\\u65F6\\u5C31\\u9700\\u8981 Subject\\uFF0C\\u5C06 Cold Observable \\u53D8\\u4E3A Hot Observable\"), mdx(\"h2\", {\n    \"id\": \"subject\"\n  }, \"Subject\"), mdx(\"p\", null, \"\\u4E3A\\u4E86\\u4FDD\\u8BC1 RxJS \\u7684 Immutable \\u7279\\u6027\\uFF0CCold Observable \\u8F6C\\u6362\\u4E3A Hot Observable \\u65F6\\u4E0D\\u80FD\\u6539\\u53D8\\u672C\\u8EAB\\uFF0C\\u800C\\u662F\\u4EA7\\u751F\\u4E00\\u4E2A\\u65B0\\u7684\\u5BF9\\u8C61\\uFF0C\\u8FD9\\u4E2A\\u5BF9\\u8C61\\u8BA2\\u9605 Cold Observable\\uFF0C\\u540C\\u65F6\\u88AB\\u8BA2\\u9605\\uFF0C\\u6240\\u4EE5 Subject \\u9700\\u8981\\u6709\\u8BA2\\u9605\\u548C\\u88AB\\u8BA2\\u9605\\u7684\\u80FD\\u529B\\uFF08\\u662F\\u4E00\\u4E2A Observable \\u540C\\u65F6\\u662F\\u4E00\\u4E2A Observer\\uFF0C\\u56E0\\u6B64 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"next*(error|complete)?\"), \"\\uFF09\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// \\u5B9E\\u73B0\\u7C7B\\u4F3C\\u89C2\\u5BDF\\u8005\\u6A21\\u5F0F\\uFF0C\\u901A\\u8FC7 new \\u51FA\\u6765\\u7684\\u5B9E\\u4F8B\\u4E2D\\u7684 next\\u3001error\\u3001complete \\u65B9\\u6CD5\\u8BA2\\u9605 Observable\\nexport declare class Subject<T> extends Observable<T> implements SubscriptionLike {\\n  // ...\\n  observers: Observer<T>[] = []\\n\\n  next(value: T) {\\n    this.observers.forEach((ob) => ob.next(T))\\n  }\\n  // error complete \\u7C7B\\u4F3C\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"实现多播\"\n  }, \"\\u5B9E\\u73B0\\u591A\\u64AD\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const subject = new Subject<number>()\\n\\nsubject.subscribe({\\n  next: (v) => console.log(`observerA: ${v}`)\\n})\\nsubject.subscribe({\\n  next: (v) => console.log(`observerB: ${v}`)\\n})\\n\\nsubject.next(1)\\nsubject.next(2)\\n\\n// Logs:\\n// observerA: 1\\n// observerB: 1\\n// observerA: 2\\n// observerB: 2\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const subject = new Subject<number>()\\nconst oba$ = interval(1000)\\noba$.subscribe(subject)\\nsubject.subscribe(console.log)\\nsleep(3000).then(() => subject.subscribe(console.log))\\n\")), mdx(\"h3\", {\n    \"id\": \"subject-可以有多个上游\"\n  }, \"Subject \\u53EF\\u4EE5\\u6709\\u591A\\u4E2A\\u4E0A\\u6E38\"), mdx(\"p\", null, \"new Subject \\u5F97\\u5230\\u7684\\u662F\\u4E00\\u4E2A\\u6709 next\\u3001error\\u3001compete \\u65B9\\u6CD5\\u7684\\u5BF9\\u8C61\\uFF0C\\u540C\\u65F6\\u5177\\u6709 subscribe \\u65B9\\u6CD5\\u8FDB\\u884C\\u8BA2\\u9605\\uFF0C\\u5BF9\\u4E8E observer \\u7684\\u90A3\\u4E09\\u4E2A\\u65B9\\u6CD5\\u5C31\\u7C7B\\u4F3C\\u53D1\\u5E03\\u8005\\u4E00\\u6837\\uFF0C\\u4F9D\\u6B21\\u901A\\u77E5\\u6240\\u6709\\u7684\\u8BA2\\u9605\\u8005\\uFF0C\\u6240\\u4EE5\\u5BF9\\u4E8E\\u4E0A\\u6E38\\u7684\\u6570\\u636E subject \\u5B9E\\u4F8B\\u53EA\\u662F\\u8C03\\u7528\\u90A3\\u4E09\\u4E2A\\u65B9\\u6CD5\\u4F9D\\u6B21\\u901A\\u77E5\\u8BA2\\u9605\\u8005\\uFF0C\\u4E0D\\u8BBA\\u662F\\u90A3\\u4E2A\\u4E0A\\u6E38\"), mdx(\"h3\", {\n    \"id\": \"subject-错误处理\"\n  }, \"Subject \\u9519\\u8BEF\\u5904\\u7406\"), mdx(\"p\", null, \"Observable \\u5185\\u90E8\\u7C7B\\u4F3C\\u8FD9\\u6837\\u5904\\u7406 subscribe\\uFF0C\\u5FFD\\u7565\\u4E86\\u4E00\\u4E9B\\u5176\\u4ED6\\u7684\\u903B\\u8F91\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"try {\\n  // observer.next \\u90A3\\u4E9B\\n} catch (err) {\\n  // observer.error(err)\\n}\\n\")), mdx(\"p\", null, \"\\u8FD9\\u91CC observer \\u5C31\\u662F subject\\uFF0Csubject \\u5185\\u90E8\\u4F7F\\u7528\\u7C7B\\u4F3C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this.observers.forEach((ob) => ob.next(data))\"), \" \\u5904\\u7406\\u6570\\u636E\"), mdx(\"p\", null, \"subject \\u5C31\\u662F\\u4E00\\u4E2A\\u8F6C\\u63A5\\u5934\\uFF0C\\u4E0A\\u6E38\\u7684\\u6570\\u636E\\u901A\\u8FC7 subject \\u4F20\\u7ED9\\u4E0B\\u6E38\"), mdx(\"h2\", {\n    \"id\": \"多播操作符\"\n  }, \"\\u591A\\u64AD\\u64CD\\u4F5C\\u7B26\"), mdx(\"h3\", {\n    \"id\": \"multicast-最基本的操作符\"\n  }, \"multicast \\u6700\\u57FA\\u672C\\u7684\\u64CD\\u4F5C\\u7B26\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const subject = new Subject<number>()\\n// const oba$ = multicast(subject)(interval(1000))\\nconst oba$ = interval(1000).pipe(multicast(subject)) as ConnectableObservable<number>\\noba$.subscribe(console.log)\\nsleep(3000).then(() => oba$.subscribe(console.log))\\nsleep(6000).then(() => oba$.connect())\\n// after 6000 ms\\n// 0\\n// 0\\n// 1\\n// 1\\n// 2\\n// 2\\n// ...\\n\")), mdx(\"p\", null, \"multicast \\u8FD4\\u56DE\\u4E00\\u4E2A ConnectableObservable\\uFF0C\\u53EF\\u4EE5\\u901A\\u8FC7 connect \\u65B9\\u6CD5\\u63A7\\u5236\\u591A\\u64AD\\u7684\\u65F6\\u673A\"), mdx(\"p\", null, \"\\u5982\\u679C\\u540C\\u6B65\\u7684\\u6570\\u636E\\u6D41\\uFF0C\\u901A\\u8FC7 subject \\u5B9E\\u73B0\\u591A\\u64AD\\uFF0C\\u5728 subject \\u8BA2\\u9605\\u4E4B\\u524D\\u5C31\\u8BA2\\u9605 subject\\uFF0C\\u90A3\\u5C31\\u6CA1\\u6709\\u4EFB\\u4F55\\u8F93\\u51FA\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const source = from([1, 2, 3])\\nconst subject = new Subject()\\nconst multicasted = source.subscribe(subject)\\n\\nsubject.subscribe({\\n  next: v => console.log(`observerA: ${v}`)\\n})\\nsubject.subscribe({\\n  next: v => console.log(`observerB: ${v}`)\\n})\\n\")), mdx(\"p\", null, \"\\u5982\\u679C\\u4E4B\\u540E\\u8BA2\\u9605 subject\\uFF0C\\u5219\\u4F1A\\u6B63\\u5E38\\u8F93\\u51FA\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const source = from([1, 2, 3])\\nconst subject = new Subject()\\n\\nsubject.subscribe({\\n  next: v => console.log(`observerA: ${v}`)\\n})\\nsubject.subscribe({\\n  next: v => console.log(`observerB: ${v}`)\\n})\\n\\nconst multicasted = source.subscribe(subject)\\n\")), mdx(\"p\", null, \"\\u6B64\\u65F6\\u5C31\\u53EF\\u4EE5\\u901A\\u8FC7 connect \\u63A7\\u5236\\u591A\\u64AD\\u65F6\\u673A\"), mdx(\"p\", null, \"\\u4F46\\u662F\\u6B64\\u65F6\\u5982\\u679C\\u6211\\u4EEC\\u9000\\u8BA2\\uFF0C\\u5C31\\u9700\\u8981\\u5728\\u591A\\u4E2A\\u8BA2\\u9605\\u8005\\u90FD\\u9000\\u8BA2\\u540E\\uFF0C\\u5728\\u624B\\u52A8\\u9000\\u8BA2 subject\\uFF08ConnectableObservable\\uFF09\\uFF0C\\u8FD9\\u6837\\u5C31\\u9020\\u6210\\u903B\\u8F91\\u5197\\u6742\\uFF0CRxJS \\u901A\\u8FC7 refCount \\u89E3\\u51B3\\u8FD9\\u4E00\\u95EE\\u9898\\uFF0CrefCount \\u5C31\\u50CF\\u81EA\\u52A8\\u5BF9\\u8BA2\\u9605\\u8005\\u8BA1\\u6570\\u4E00\\u6837\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"refCount makes the multicasted Observable automatically start executing when the first subscriber arrives, and stop executing when the last subscriber leaves.\")), mdx(\"p\", null, \"\\u4E4B\\u524D\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const source = interval(500);\\nconst subject = new Subject();\\nconst multicasted = source.pipe(multicast(subject));\\nlet subscription1, subscription2, subscriptionConnect;\\n\\nsubscription1 = multicasted.subscribe({\\n  next: (v) => console.log(`observerA: ${v}`)\\n});\\n// We should call `connect()` here, because the first\\n// subscriber to `multicasted` is interested in consuming values\\nsubscriptionConnect = multicasted.connect();\\n\\nsetTimeout(() => {\\n  subscription2 = multicasted.subscribe({\\n    next: (v) => console.log(`observerB: ${v}`)\\n  });\\n}, 600);\\n\\nsetTimeout(() => {\\n  subscription1.unsubscribe();\\n}, 1200);\\n\\n// We should unsubscribe the shared Observable execution here,\\n// because `multicasted` would have no more subscribers after this\\nsetTimeout(() => {\\n  subscription2.unsubscribe();\\n  subscriptionConnect.unsubscribe(); // for the shared Observable execution\\n}, 2000);\\n\")), mdx(\"p\", null, \"\\u4E4B\\u540E\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const source = interval(500);\\nconst subject = new Subject();\\nconst refCounted = source.pipe(multicast(subject), refCount());\\nlet subscription1, subscription2;\\n\\n// This calls `connect()`, because\\n// it is the first subscriber to `refCounted`\\nconsole.log('observerA subscribed');\\nsubscription1 = refCounted.subscribe({\\n  next: (v) => console.log(`observerA: ${v}`)\\n});\\n\\nsetTimeout(() => {\\n  console.log('observerB subscribed');\\n  subscription2 = refCounted.subscribe({\\n    next: (v) => console.log(`observerB: ${v}`)\\n  });\\n}, 600);\\n\\nsetTimeout(() => {\\n  console.log('observerA unsubscribed');\\n  subscription1.unsubscribe();\\n}, 1200);\\n\\n// This is when the shared Observable execution will stop, because\\n// `refCounted` would have no more subscribers after this\\nsetTimeout(() => {\\n  console.log('observerB unsubscribed');\\n  subscription2.unsubscribe();\\n}, 2000);\\n\\n// Logs\\n// observerA subscribed\\n// observerA: 0\\n// observerB subscribed\\n// observerA: 1\\n// observerB: 1\\n// observerA unsubscribed\\n// observerB: 2\\n// observerB unsubscribed\\n\")), mdx(\"p\", null, \"multicast \\u53C2\\u6570\\u4E5F\\u53EF\\u4EE5\\u662F\\u4E00\\u4E2A SubjectFactory \\u51FD\\u6570\\uFF0C\\u4E0E\\u76F4\\u63A5\\u4F7F\\u7528 Subject \\u5B9E\\u4F8B\\u7684\\u533A\\u522B\\u5728\\u4E8E\\uFF0C\\u4F7F\\u7528 refCount \\u81EA\\u52A8\\u9000\\u8BA2 subject \\u540E\\uFF0C\\u4E4B\\u540E\\u518D\\u6709\\u8BA2\\u9605\\u5C31\\u6CA1\\u6709\\u7528\\uFF0C\\u56E0\\u4E3A Subject \\u5B9E\\u4F8B\\u9000\\u8BA2\\u540E\\u751F\\u547D\\u5468\\u671F\\u7ED3\\u675F\\uFF0C\\u800C\\u4F7F\\u7528\\u5DE5\\u5382\\u51FD\\u6570\\u65F6\\u4F1A\\u91CD\\u65B0\\u8C03\\u7528\\u8BE5\\u51FD\\u6570\\uFF0C\\u4EA7\\u751F\\u4E00\\u4E2A\\u65B0\\u7684 Subject \\u5B9E\\u4F8B\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const coldSource$ = interval(1000).pipe(take(3))\\nconst tick$ = coldSource$.pipe(multicast(new Subject()), refCount())\\n\\ntick$.subscribe(value => console.log('observer 1: ' + value))\\n\\nsetTimeout(() => {\\n  tick$.subscribe(value => console.log('observer 2: ' + value))\\n}, 1500)\\n\\nsetTimeout(() => {\\n  tick$.subscribe(value => console.log('observer 3: ' + value))\\n}, 5000)\\n// observer 1: 0\\n// observer 1: 1\\n// observer 2: 1\\n// observer 1: 2\\n// observer 2: 2\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const coldSource$ = interval(1000).pipe(take(3))\\nconst tick$ = coldSource$.pipe(multicast(() => new Subject()), refCount())\\n\\ntick$.subscribe(value => console.log('observer 1: ' + value))\\n\\nsetTimeout(() => {\\n  tick$.subscribe(value => console.log('observer 2: ' + value))\\n}, 1500)\\n\\nsetTimeout(() => {\\n  tick$.subscribe(value => console.log('observer 3: ' + value))\\n}, 5000)\\n// observer 1: 0\\n// observer 1: 1\\n// observer 2: 1\\n// observer 1: 2\\n// observer 2: 2\\n// observer 3: 0\\n// observer 3: 1\\n// observer 3: 2\\n\")), mdx(\"p\", null, \"selector \\u53C2\\u6570\\uFF1A\\u53EA\\u8981\\u6307\\u5B9A\\u4E86 selector \\u53C2\\u6570\\uFF0C\\u5C31\\u6307\\u5B9A\\u4E86 multicast \\u8FD4\\u56DE\\u7684 Observable \\u5BF9\\u8C61\\u7684\\u751F\\u6210\\u65B9\\u6CD5\"), mdx(\"h3\", {\n    \"id\": \"publish\"\n  }, \"publish\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function publish(selector) {\\n  if (selector) {\\n    return this.multicast(() => new Subject(), selector)\\n  } else {\\n    return this.multicast(new Subject())\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"share\"\n  }, \"share\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function share() {\\n  return multicast(() => new Subject()).refCount()\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"高级多播，增强的-subject\"\n  }, \"\\u9AD8\\u7EA7\\u591A\\u64AD\\uFF0C\\u589E\\u5F3A\\u7684 Subject\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"publishLast AsyncSubject\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"publishReplay ReplaySubject\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"publishBehavior BehaviorSubject\"))), mdx(\"h3\", {\n    \"id\": \"publishlast-asyncsubject\"\n  }, \"publishLast AsyncSubject\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"export function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\\n}\\n\\nexport class AsyncSubject<T> extends Subject<T> {\\n  private value: T = null;\\n  private hasNext: boolean = false;\\n  private hasCompleted: boolean = false;\\n\\n  next(value: T): void {\\n    if (!this.hasCompleted) {\\n      this.value = value;\\n      this.hasNext = true;\\n    }\\n  }\\n\\n  error(error: any): void {\\n    if (!this.hasCompleted) {\\n      super.error(error);\\n    }\\n  }\\n\\n  complete(): void {\\n    this.hasCompleted = true;\\n    if (this.hasNext) {\\n      super.next(this.value);\\n    }\\n    super.complete();\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"publishreplay-replaysubject\"\n  }, \"publishReplay ReplaySubject\"), mdx(\"p\", null, \"replay \\u6709\\u56DE\\u653E\\u7684\\u80FD\\u529B\\uFF0C\\u53EA\\u8BA2\\u9605\\u4E00\\u6B21\\u6570\\u636E\\u6E90\\uFF0Cpipe \\u53EA\\u8FD0\\u884C\\u4E00\\u6B21\\uFF0C\\u628A\\u6570\\u636E\\u8BB0\\u5F55\\u4E0B\\u6765\\u5728\\u5410\\u51FA\\u4E00\\u904D\\uFF0C\\u800C re-subscribe \\u662F\\u591A\\u6B21\\u8BA2\\u9605\\uFF0Cpipe \\u8FD0\\u884C\\u591A\\u6B21\\uFF0C\\u628A\\u6240\\u6709\\u6570\\u636E\\u90FD\\u91CD\\u65B0\\u4EA7\\u751F\\u4E00\\u904D\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function publishReplay(\\n  bufferSize = Number.POSITIVE_INFINITY,\\n  windowTime = Number.POSITIVE_INFINITY,\\n) {\\n  return multicast(new ReplaySubject(bufferSize, windowTime));\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const tick$ = interval(1000).pipe(\\n  take(3),\\n  tap(x => console.log('source ', x)),\\n)\\nconst sharedTick$ = (tick$.pipe(publishReplay()) as ConnectableObservable<number>).refCount()\\nsharedTick$.subscribe(value => console.log('observer 1: ' + value))\\nsetTimeout(() => {\\n  sharedTick$.subscribe(value => console.log('observer 2: ' + value))\\n}, 5000)\\n// source 0\\n// observer 1: 0\\n// source 1\\n// observer 1: 1\\n// source 2\\n// observer 1: 2\\n// \\u540C\\u65F6\\u6253\\u5370\\u51FA\\u6765\\u4E0B\\u9762\\u7684\\n// observer 2: 0\\n// observer 2: 1\\n// observer 2: 2\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"tap \\u539F\\u6765\\u53EB do\\uFF0Ctap \\u6709\\u7A83\\u542C\\u7684\\u610F\\u601D\\uFF0C\\u4E0D\\u80FD\\u6539\\u53D8\\u6570\\u636E\\uFF0C\\u4F46\\u5E38\\u7528\\u6765\\u89E6\\u53D1\\u526F\\u4F5C\\u7528\")), mdx(\"h3\", {\n    \"id\": \"publishbehavior-behaviorsubject\"\n  }, \"publishBehavior BehaviorSubject\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"export class BehaviorSubject<T> extends Subject<T> {\\n  constructor(private _value: T) {\\n    super();\\n  }\\n  // ...\\n  next(value: T): void {\\n    super.next(this._value = value);\\n  }\\n}\\n\")), mdx(\"p\", null, \"\\u63D0\\u4F9B\\u4E00\\u4E2A\\u201C\\u9ED8\\u8BA4\\u6570\\u636E\\u201D\\uFF0C\\u5F53\\u6DFB\\u52A0 Observer \\u7684\\u65F6\\u5019\\uFF0C\\u5373\\u4F7F\\u4E0A\\u6E38\\u8FD8\\u6CA1\\u6709\\u5410\\u51FA\\u6570\\u636E Observer \\u4E5F\\u4F1A\\u7ACB\\u5373\\u83B7\\u5F97\\u8FD9\\u4E2A\\u201C\\u9ED8\\u8BA4\\u6570\\u636E\\u201D\\uFF1B\\u800C\\u4E14\\uFF0C\\u8FD9\\u4E2A \\u201C\\u9ED8\\u8BA4\\u6570\\u636E\\u201D \\u603B\\u662F\\u4F1A\\u88AB\\u4E0A\\u6E38\\u5410\\u51FA\\u7684\\u6700\\u65B0\\u6570\\u636E\\u66FF\\u4EE3\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/note/a-simple-explanation-of-rxjs/subject"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}