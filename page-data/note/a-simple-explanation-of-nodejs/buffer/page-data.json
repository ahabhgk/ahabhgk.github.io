{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/note/a-simple-explanation-of-nodejs/buffer","result":{"data":{"page":{"__typename":"MdxPage","title":"理解 Buffer","slug":"/note/a-simple-explanation-of-nodejs/buffer","excerpt":"浏览器上很少遇到处理大量二进制数据的情况，所以 ES 规范中没有这方面的定义；Node 中处理网络协议、处理图片、接收上传文件等需要处理，JS 的字符串不能应付，所以有了 Buffer Buffer 性能相关的用 C++ 写的 node_buffer 实现，其余部分用 JS…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"理解 Buffer\",\n  \"slug\": \"/note/a-simple-explanation-of-nodejs/buffer\",\n  \"date\": \"2020-10-26T00:00:00.000Z\",\n  \"description\": \"《深入浅出 NodeJS》读书笔记\",\n  \"tags\": [\"Note\", \"A Simple Explanation of NodeJS\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u6D4F\\u89C8\\u5668\\u4E0A\\u5F88\\u5C11\\u9047\\u5230\\u5904\\u7406\\u5927\\u91CF\\u4E8C\\u8FDB\\u5236\\u6570\\u636E\\u7684\\u60C5\\u51B5\\uFF0C\\u6240\\u4EE5 ES \\u89C4\\u8303\\u4E2D\\u6CA1\\u6709\\u8FD9\\u65B9\\u9762\\u7684\\u5B9A\\u4E49\\uFF1BNode \\u4E2D\\u5904\\u7406\\u7F51\\u7EDC\\u534F\\u8BAE\\u3001\\u5904\\u7406\\u56FE\\u7247\\u3001\\u63A5\\u6536\\u4E0A\\u4F20\\u6587\\u4EF6\\u7B49\\u9700\\u8981\\u5904\\u7406\\uFF0CJS \\u7684\\u5B57\\u7B26\\u4E32\\u4E0D\\u80FD\\u5E94\\u4ED8\\uFF0C\\u6240\\u4EE5\\u6709\\u4E86 Buffer\"), mdx(\"p\", null, \"Buffer \\u6027\\u80FD\\u76F8\\u5173\\u7684\\u7528 C++ \\u5199\\u7684 node_buffer \\u5B9E\\u73B0\\uFF0C\\u5176\\u4F59\\u90E8\\u5206\\u7528 JS\"), mdx(\"p\", null, \"\\u7531\\u4E8E Buffer \\u592A\\u8FC7\\u5E38\\u89C1\\uFF0CNode \\u5728\\u8FDB\\u7A0B\\u542F\\u52A8\\u65F6\\u5C31\\u7528\\u5230\\uFF0C\\u6240\\u4EE5\\u653E\\u5728\\u4E86 global \\u5BF9\\u8C61\\u4E0A\\uFF0C\\u65E0\\u9700 require\"), mdx(\"h2\", {\n    \"id\": \"buffer-对象\"\n  }, \"Buffer \\u5BF9\\u8C61\"), mdx(\"p\", null, \"\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Buffer.alloc\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Buffer.from\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Buffer.allocUnsafe\"), \" \\u4EE3\\u66FF \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new Buffer\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function stringToBase64(req, res) {\\n  // The request body should have the format of `{ string: 'foobar' }`.\\n  const rawBytes = new Buffer(req.body.string);\\n  const encoded = rawBytes.toString('base64');\\n  res.end({ encoded });\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new Buffer(42)\"), \" \\u521B\\u5EFA\\u4E00\\u4E2A 42 \\u4E2A\\u5B57\\u8282\\u7684 \\u7F13\\u5B58\\uFF0C\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new Buffer('abc')\"), \" \\u521B\\u5EFA\\u4E00\\u4E2A UTF-8 \\u7F16\\u7801\\u7684\\u5B57\\u7B26\\u4E32 'abc'\\uFF0C\\u4E0A\\u9762\\u4EE3\\u7801\\u653B\\u51FB\\u8005\\u53EF\\u4EE5\\u6545\\u610F\\u4F20\\u5165\\u4E00\\u4E2A\\u6570\\u5B57\\uFF0C\\u5F00\\u4E00\\u4E2A\\u5F88\\u5927\\u7684\\u5185\\u5B58\\u4EE5\\u8FDB\\u884C\\u653B\\u51FB\\uFF0C\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/zh-cn/docs/guides/buffer-constructor-deprecation/\"\n  }), \"\\u8BF7\\u4F7F\\u7528 Buffer.from() / Buffer.alloc()\")), mdx(\"h2\", {\n    \"id\": \"buffer-内存分配\"\n  }, \"Buffer \\u5185\\u5B58\\u5206\\u914D\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/note/a-simple-explanation-of-nodejs/buffer"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}